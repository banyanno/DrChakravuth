'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="cms_database")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCategory_Item(instance As Category_Item)
    End Sub
  Partial Private Sub UpdateCategory_Item(instance As Category_Item)
    End Sub
  Partial Private Sub DeleteCategory_Item(instance As Category_Item)
    End Sub
  Partial Private Sub InsertCheck_Item(instance As Check_Item)
    End Sub
  Partial Private Sub UpdateCheck_Item(instance As Check_Item)
    End Sub
  Partial Private Sub DeleteCheck_Item(instance As Check_Item)
    End Sub
  Partial Private Sub InsertConsult_Category(instance As Consult_Category)
    End Sub
  Partial Private Sub UpdateConsult_Category(instance As Consult_Category)
    End Sub
  Partial Private Sub DeleteConsult_Category(instance As Consult_Category)
    End Sub
  Partial Private Sub InsertConsult_Disease(instance As Consult_Disease)
    End Sub
  Partial Private Sub UpdateConsult_Disease(instance As Consult_Disease)
    End Sub
  Partial Private Sub DeleteConsult_Disease(instance As Consult_Disease)
    End Sub
  Partial Private Sub InsertConsultation_Result(instance As Consultation_Result)
    End Sub
  Partial Private Sub UpdateConsultation_Result(instance As Consultation_Result)
    End Sub
  Partial Private Sub DeleteConsultation_Result(instance As Consultation_Result)
    End Sub
  Partial Private Sub InsertPatient(instance As Patient)
    End Sub
  Partial Private Sub UpdatePatient(instance As Patient)
    End Sub
  Partial Private Sub DeletePatient(instance As Patient)
    End Sub
  Partial Private Sub InsertConsultation(instance As Consultation)
    End Sub
  Partial Private Sub UpdateConsultation(instance As Consultation)
    End Sub
  Partial Private Sub DeleteConsultation(instance As Consultation)
    End Sub
  Partial Private Sub InsertCheck_Detail(instance As Check_Detail)
    End Sub
  Partial Private Sub UpdateCheck_Detail(instance As Check_Detail)
    End Sub
  Partial Private Sub DeleteCheck_Detail(instance As Check_Detail)
    End Sub
  Partial Private Sub InsertConsultation_Detail(instance As Consultation_Detail)
    End Sub
  Partial Private Sub UpdateConsultation_Detail(instance As Consultation_Detail)
    End Sub
  Partial Private Sub DeleteConsultation_Detail(instance As Consultation_Detail)
    End Sub
  Partial Private Sub InsertCheck_Result(instance As Check_Result)
    End Sub
  Partial Private Sub UpdateCheck_Result(instance As Check_Result)
    End Sub
  Partial Private Sub DeleteCheck_Result(instance As Check_Result)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Category_Items() As System.Data.Linq.Table(Of Category_Item)
		Get
			Return Me.GetTable(Of Category_Item)
		End Get
	End Property
	
	Public ReadOnly Property Check_Items() As System.Data.Linq.Table(Of Check_Item)
		Get
			Return Me.GetTable(Of Check_Item)
		End Get
	End Property
	
	Public ReadOnly Property City_Provinces() As System.Data.Linq.Table(Of City_Province)
		Get
			Return Me.GetTable(Of City_Province)
		End Get
	End Property
	
	Public ReadOnly Property Consult_Categories() As System.Data.Linq.Table(Of Consult_Category)
		Get
			Return Me.GetTable(Of Consult_Category)
		End Get
	End Property
	
	Public ReadOnly Property Consult_Diseases() As System.Data.Linq.Table(Of Consult_Disease)
		Get
			Return Me.GetTable(Of Consult_Disease)
		End Get
	End Property
	
	Public ReadOnly Property Consultation_Results() As System.Data.Linq.Table(Of Consultation_Result)
		Get
			Return Me.GetTable(Of Consultation_Result)
		End Get
	End Property
	
	Public ReadOnly Property Patients() As System.Data.Linq.Table(Of Patient)
		Get
			Return Me.GetTable(Of Patient)
		End Get
	End Property
	
	Public ReadOnly Property tblConsultTypes() As System.Data.Linq.Table(Of tblConsultType)
		Get
			Return Me.GetTable(Of tblConsultType)
		End Get
	End Property
	
	Public ReadOnly Property Consultations() As System.Data.Linq.Table(Of Consultation)
		Get
			Return Me.GetTable(Of Consultation)
		End Get
	End Property
	
	Public ReadOnly Property Check_Details() As System.Data.Linq.Table(Of Check_Detail)
		Get
			Return Me.GetTable(Of Check_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Consultation_Details() As System.Data.Linq.Table(Of Consultation_Detail)
		Get
			Return Me.GetTable(Of Consultation_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Check_Results() As System.Data.Linq.Table(Of Check_Result)
		Get
			Return Me.GetTable(Of Check_Result)
		End Get
	End Property
End Class

<Table(Name:="dbo.Category_Items")>  _
Partial Public Class Category_Item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Item_ID As Long
	
	Private _Category_ID As Integer
	
	Private _Item_Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItem_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnItem_IDChanged()
    End Sub
    Partial Private Sub OnCategory_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategory_IDChanged()
    End Sub
    Partial Private Sub OnItem_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnItem_DescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Item_ID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Item_ID() As Long
		Get
			Return Me._Item_ID
		End Get
		Set
			If ((Me._Item_ID = value)  _
						= false) Then
				Me.OnItem_IDChanging(value)
				Me.SendPropertyChanging
				Me._Item_ID = value
				Me.SendPropertyChanged("Item_ID")
				Me.OnItem_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Category_ID", DbType:="Int NOT NULL")>  _
	Public Property Category_ID() As Integer
		Get
			Return Me._Category_ID
		End Get
		Set
			If ((Me._Category_ID = value)  _
						= false) Then
				Me.OnCategory_IDChanging(value)
				Me.SendPropertyChanging
				Me._Category_ID = value
				Me.SendPropertyChanged("Category_ID")
				Me.OnCategory_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Item_Description", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Item_Description() As String
		Get
			Return Me._Item_Description
		End Get
		Set
			If (String.Equals(Me._Item_Description, value) = false) Then
				Me.OnItem_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Item_Description = value
				Me.SendPropertyChanged("Item_Description")
				Me.OnItem_DescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Check_Items")>  _
Partial Public Class Check_Item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Item_ID As Long
	
	Private _Item_Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItem_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnItem_IDChanged()
    End Sub
    Partial Private Sub OnItem_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnItem_DescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Item_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Item_ID() As Long
		Get
			Return Me._Item_ID
		End Get
		Set
			If ((Me._Item_ID = value)  _
						= false) Then
				Me.OnItem_IDChanging(value)
				Me.SendPropertyChanging
				Me._Item_ID = value
				Me.SendPropertyChanged("Item_ID")
				Me.OnItem_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Item_Description", DbType:="VarChar(50)")>  _
	Public Property Item_Description() As String
		Get
			Return Me._Item_Description
		End Get
		Set
			If (String.Equals(Me._Item_Description, value) = false) Then
				Me.OnItem_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Item_Description = value
				Me.SendPropertyChanged("Item_Description")
				Me.OnItem_DescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.City_Provinces")>  _
Partial Public Class City_Province
	
	Private _Province_Code As Long
	
	Private _Province_Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Province_Code", AutoSync:=AutoSync.Always, DbType:="BigInt NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Province_Code() As Long
		Get
			Return Me._Province_Code
		End Get
		Set
			If ((Me._Province_Code = value)  _
						= false) Then
				Me._Province_Code = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Province_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Province_Name() As String
		Get
			Return Me._Province_Name
		End Get
		Set
			If (String.Equals(Me._Province_Name, value) = false) Then
				Me._Province_Name = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Consult_Categories")>  _
Partial Public Class Consult_Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Category_ID As Integer
	
	Private _Disease_ID As Integer
	
	Private _Category_Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategory_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategory_IDChanged()
    End Sub
    Partial Private Sub OnDisease_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisease_IDChanged()
    End Sub
    Partial Private Sub OnCategory_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCategory_DescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Category_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Category_ID() As Integer
		Get
			Return Me._Category_ID
		End Get
		Set
			If ((Me._Category_ID = value)  _
						= false) Then
				Me.OnCategory_IDChanging(value)
				Me.SendPropertyChanging
				Me._Category_ID = value
				Me.SendPropertyChanged("Category_ID")
				Me.OnCategory_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Disease_ID", DbType:="Int NOT NULL")>  _
	Public Property Disease_ID() As Integer
		Get
			Return Me._Disease_ID
		End Get
		Set
			If ((Me._Disease_ID = value)  _
						= false) Then
				Me.OnDisease_IDChanging(value)
				Me.SendPropertyChanging
				Me._Disease_ID = value
				Me.SendPropertyChanged("Disease_ID")
				Me.OnDisease_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Category_Description", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Category_Description() As String
		Get
			Return Me._Category_Description
		End Get
		Set
			If (String.Equals(Me._Category_Description, value) = false) Then
				Me.OnCategory_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Category_Description = value
				Me.SendPropertyChanged("Category_Description")
				Me.OnCategory_DescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Consult_Diseases")>  _
Partial Public Class Consult_Disease
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Disease_ID As Integer
	
	Private _Disease_Name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDisease_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisease_IDChanged()
    End Sub
    Partial Private Sub OnDisease_NameChanging(value As String)
    End Sub
    Partial Private Sub OnDisease_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Disease_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Disease_ID() As Integer
		Get
			Return Me._Disease_ID
		End Get
		Set
			If ((Me._Disease_ID = value)  _
						= false) Then
				Me.OnDisease_IDChanging(value)
				Me.SendPropertyChanging
				Me._Disease_ID = value
				Me.SendPropertyChanged("Disease_ID")
				Me.OnDisease_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Disease_Name", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Disease_Name() As String
		Get
			Return Me._Disease_Name
		End Get
		Set
			If (String.Equals(Me._Disease_Name, value) = false) Then
				Me.OnDisease_NameChanging(value)
				Me.SendPropertyChanging
				Me._Disease_Name = value
				Me.SendPropertyChanged("Disease_Name")
				Me.OnDisease_NameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Consultation_Results")>  _
Partial Public Class Consultation_Result
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Result_ID As Long
	
	Private _PConsult_No As Long
	
	Private _Item_ID As Integer
	
	Private _Is_Yes As System.Nullable(Of Boolean)
	
	Private _Result_Text As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResult_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnResult_IDChanged()
    End Sub
    Partial Private Sub OnPConsult_NoChanging(value As Long)
    End Sub
    Partial Private Sub OnPConsult_NoChanged()
    End Sub
    Partial Private Sub OnItem_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItem_IDChanged()
    End Sub
    Partial Private Sub OnIs_YesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIs_YesChanged()
    End Sub
    Partial Private Sub OnResult_TextChanging(value As String)
    End Sub
    Partial Private Sub OnResult_TextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Result_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Result_ID() As Long
		Get
			Return Me._Result_ID
		End Get
		Set
			If ((Me._Result_ID = value)  _
						= false) Then
				Me.OnResult_IDChanging(value)
				Me.SendPropertyChanging
				Me._Result_ID = value
				Me.SendPropertyChanged("Result_ID")
				Me.OnResult_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PConsult_No", DbType:="BigInt NOT NULL")>  _
	Public Property PConsult_No() As Long
		Get
			Return Me._PConsult_No
		End Get
		Set
			If ((Me._PConsult_No = value)  _
						= false) Then
				Me.OnPConsult_NoChanging(value)
				Me.SendPropertyChanging
				Me._PConsult_No = value
				Me.SendPropertyChanged("PConsult_No")
				Me.OnPConsult_NoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Item_ID", DbType:="Int NOT NULL")>  _
	Public Property Item_ID() As Integer
		Get
			Return Me._Item_ID
		End Get
		Set
			If ((Me._Item_ID = value)  _
						= false) Then
				Me.OnItem_IDChanging(value)
				Me.SendPropertyChanging
				Me._Item_ID = value
				Me.SendPropertyChanged("Item_ID")
				Me.OnItem_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Is_Yes", DbType:="Bit")>  _
	Public Property Is_Yes() As System.Nullable(Of Boolean)
		Get
			Return Me._Is_Yes
		End Get
		Set
			If (Me._Is_Yes.Equals(value) = false) Then
				Me.OnIs_YesChanging(value)
				Me.SendPropertyChanging
				Me._Is_Yes = value
				Me.SendPropertyChanged("Is_Yes")
				Me.OnIs_YesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Result_Text", DbType:="NVarChar(1000)")>  _
	Public Property Result_Text() As String
		Get
			Return Me._Result_Text
		End Get
		Set
			If (String.Equals(Me._Result_Text, value) = false) Then
				Me.OnResult_TextChanging(value)
				Me.SendPropertyChanging
				Me._Result_Text = value
				Me.SendPropertyChanged("Result_Text")
				Me.OnResult_TextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Patients")>  _
Partial Public Class Patient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Patient_ID As Long
	
	Private _Full_Name As String
	
	Private _Gender As String
	
	Private _Age As System.Nullable(Of Integer)
	
	Private _Identification_Number As String
	
	Private _Address As String
	
	Private _City_Province As String
	
	Private _Phone As String
	
	Private _Birth_Date As System.Nullable(Of Date)
	
	Private _Is_Valid As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatient_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnPatient_IDChanged()
    End Sub
    Partial Private Sub OnFull_NameChanging(value As String)
    End Sub
    Partial Private Sub OnFull_NameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnIdentification_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnIdentification_NumberChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCity_ProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnCity_ProvinceChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnBirth_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBirth_DateChanged()
    End Sub
    Partial Private Sub OnIs_ValidChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIs_ValidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Patient_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Patient_ID() As Long
		Get
			Return Me._Patient_ID
		End Get
		Set
			If ((Me._Patient_ID = value)  _
						= false) Then
				Me.OnPatient_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patient_ID = value
				Me.SendPropertyChanged("Patient_ID")
				Me.OnPatient_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Full_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Full_Name() As String
		Get
			Return Me._Full_Name
		End Get
		Set
			If (String.Equals(Me._Full_Name, value) = false) Then
				Me.OnFull_NameChanging(value)
				Me.SendPropertyChanging
				Me._Full_Name = value
				Me.SendPropertyChanged("Full_Name")
				Me.OnFull_NameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Gender", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Age", DbType:="Int")>  _
	Public Property Age() As System.Nullable(Of Integer)
		Get
			Return Me._Age
		End Get
		Set
			If (Me._Age.Equals(value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Identification_Number", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Identification_Number() As String
		Get
			Return Me._Identification_Number
		End Get
		Set
			If (String.Equals(Me._Identification_Number, value) = false) Then
				Me.OnIdentification_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Identification_Number = value
				Me.SendPropertyChanged("Identification_Number")
				Me.OnIdentification_NumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Address", DbType:="NVarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_City_Province", DbType:="NVarChar(50)")>  _
	Public Property City_Province() As String
		Get
			Return Me._City_Province
		End Get
		Set
			If (String.Equals(Me._City_Province, value) = false) Then
				Me.OnCity_ProvinceChanging(value)
				Me.SendPropertyChanging
				Me._City_Province = value
				Me.SendPropertyChanged("City_Province")
				Me.OnCity_ProvinceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="NVarChar(25)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Birth_Date", DbType:="DateTime")>  _
	Public Property Birth_Date() As System.Nullable(Of Date)
		Get
			Return Me._Birth_Date
		End Get
		Set
			If (Me._Birth_Date.Equals(value) = false) Then
				Me.OnBirth_DateChanging(value)
				Me.SendPropertyChanging
				Me._Birth_Date = value
				Me.SendPropertyChanged("Birth_Date")
				Me.OnBirth_DateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Is_Valid", DbType:="Bit NOT NULL")>  _
	Public Property Is_Valid() As Boolean
		Get
			Return Me._Is_Valid
		End Get
		Set
			If ((Me._Is_Valid = value)  _
						= false) Then
				Me.OnIs_ValidChanging(value)
				Me.SendPropertyChanging
				Me._Is_Valid = value
				Me.SendPropertyChanged("Is_Valid")
				Me.OnIs_ValidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.tblConsultType")>  _
Partial Public Class tblConsultType
	
	Private _consulttypeid As Integer
	
	Private _consulttypename As String
	
	Private _price As Double
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_consulttypeid", DbType:="Int NOT NULL")>  _
	Public Property consulttypeid() As Integer
		Get
			Return Me._consulttypeid
		End Get
		Set
			If ((Me._consulttypeid = value)  _
						= false) Then
				Me._consulttypeid = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_consulttypename", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property consulttypename() As String
		Get
			Return Me._consulttypename
		End Get
		Set
			If (String.Equals(Me._consulttypename, value) = false) Then
				Me._consulttypename = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_price", DbType:="Float NOT NULL")>  _
	Public Property price() As Double
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me._price = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Consultations")>  _
Partial Public Class Consultation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Consult_No As Long
	
	Private _Patient_ID As Long
	
	Private _Status As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnConsult_NoChanging(value As Long)
    End Sub
    Partial Private Sub OnConsult_NoChanged()
    End Sub
    Partial Private Sub OnPatient_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnPatient_IDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Consult_No", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Consult_No() As Long
		Get
			Return Me._Consult_No
		End Get
		Set
			If ((Me._Consult_No = value)  _
						= false) Then
				Me.OnConsult_NoChanging(value)
				Me.SendPropertyChanging
				Me._Consult_No = value
				Me.SendPropertyChanged("Consult_No")
				Me.OnConsult_NoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Patient_ID", DbType:="BigInt NOT NULL")>  _
	Public Property Patient_ID() As Long
		Get
			Return Me._Patient_ID
		End Get
		Set
			If ((Me._Patient_ID = value)  _
						= false) Then
				Me.OnPatient_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patient_ID = value
				Me.SendPropertyChanged("Patient_ID")
				Me.OnPatient_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Check_Details")>  _
Partial Public Class Check_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Check_No As Long
	
	Private _prescriptionid As Long
	
	Private _Patient_ID As System.Nullable(Of Long)
	
	Private _Check_Date As System.Nullable(Of Date)
	
	Private _User_Create As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCheck_NoChanging(value As Long)
    End Sub
    Partial Private Sub OnCheck_NoChanged()
    End Sub
    Partial Private Sub OnprescriptionidChanging(value As Long)
    End Sub
    Partial Private Sub OnprescriptionidChanged()
    End Sub
    Partial Private Sub OnPatient_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPatient_IDChanged()
    End Sub
    Partial Private Sub OnCheck_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCheck_DateChanged()
    End Sub
    Partial Private Sub OnUser_CreateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUser_CreateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Check_No", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Check_No() As Long
		Get
			Return Me._Check_No
		End Get
		Set
			If ((Me._Check_No = value)  _
						= false) Then
				Me.OnCheck_NoChanging(value)
				Me.SendPropertyChanging
				Me._Check_No = value
				Me.SendPropertyChanged("Check_No")
				Me.OnCheck_NoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_prescriptionid", DbType:="BigInt NOT NULL")>  _
	Public Property prescriptionid() As Long
		Get
			Return Me._prescriptionid
		End Get
		Set
			If ((Me._prescriptionid = value)  _
						= false) Then
				Me.OnprescriptionidChanging(value)
				Me.SendPropertyChanging
				Me._prescriptionid = value
				Me.SendPropertyChanged("prescriptionid")
				Me.OnprescriptionidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Patient_ID", DbType:="BigInt")>  _
	Public Property Patient_ID() As System.Nullable(Of Long)
		Get
			Return Me._Patient_ID
		End Get
		Set
			If (Me._Patient_ID.Equals(value) = false) Then
				Me.OnPatient_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patient_ID = value
				Me.SendPropertyChanged("Patient_ID")
				Me.OnPatient_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Check_Date", DbType:="DateTime")>  _
	Public Property Check_Date() As System.Nullable(Of Date)
		Get
			Return Me._Check_Date
		End Get
		Set
			If (Me._Check_Date.Equals(value) = false) Then
				Me.OnCheck_DateChanging(value)
				Me.SendPropertyChanging
				Me._Check_Date = value
				Me.SendPropertyChanged("Check_Date")
				Me.OnCheck_DateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_User_Create", DbType:="Int")>  _
	Public Property User_Create() As System.Nullable(Of Integer)
		Get
			Return Me._User_Create
		End Get
		Set
			If (Me._User_Create.Equals(value) = false) Then
				Me.OnUser_CreateChanging(value)
				Me.SendPropertyChanging
				Me._User_Create = value
				Me.SendPropertyChanged("User_Create")
				Me.OnUser_CreateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Consultation_Details")>  _
Partial Public Class Consultation_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PConsult_No As Long
	
	Private _prescriptionid As System.Nullable(Of Long)
	
	Private _Patient_ID As Long
	
	Private _Disease_ID As Integer
	
	Private _Consult_Date As Date
	
	Private _User_Create As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPConsult_NoChanging(value As Long)
    End Sub
    Partial Private Sub OnPConsult_NoChanged()
    End Sub
    Partial Private Sub OnprescriptionidChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnprescriptionidChanged()
    End Sub
    Partial Private Sub OnPatient_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnPatient_IDChanged()
    End Sub
    Partial Private Sub OnDisease_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisease_IDChanged()
    End Sub
    Partial Private Sub OnConsult_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnConsult_DateChanged()
    End Sub
    Partial Private Sub OnUser_CreateChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUser_CreateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PConsult_No", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PConsult_No() As Long
		Get
			Return Me._PConsult_No
		End Get
		Set
			If ((Me._PConsult_No = value)  _
						= false) Then
				Me.OnPConsult_NoChanging(value)
				Me.SendPropertyChanging
				Me._PConsult_No = value
				Me.SendPropertyChanged("PConsult_No")
				Me.OnPConsult_NoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_prescriptionid", DbType:="BigInt")>  _
	Public Property prescriptionid() As System.Nullable(Of Long)
		Get
			Return Me._prescriptionid
		End Get
		Set
			If (Me._prescriptionid.Equals(value) = false) Then
				Me.OnprescriptionidChanging(value)
				Me.SendPropertyChanging
				Me._prescriptionid = value
				Me.SendPropertyChanged("prescriptionid")
				Me.OnprescriptionidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Patient_ID", DbType:="BigInt NOT NULL")>  _
	Public Property Patient_ID() As Long
		Get
			Return Me._Patient_ID
		End Get
		Set
			If ((Me._Patient_ID = value)  _
						= false) Then
				Me.OnPatient_IDChanging(value)
				Me.SendPropertyChanging
				Me._Patient_ID = value
				Me.SendPropertyChanged("Patient_ID")
				Me.OnPatient_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Disease_ID", DbType:="Int NOT NULL")>  _
	Public Property Disease_ID() As Integer
		Get
			Return Me._Disease_ID
		End Get
		Set
			If ((Me._Disease_ID = value)  _
						= false) Then
				Me.OnDisease_IDChanging(value)
				Me.SendPropertyChanging
				Me._Disease_ID = value
				Me.SendPropertyChanged("Disease_ID")
				Me.OnDisease_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Consult_Date", DbType:="DateTime NOT NULL")>  _
	Public Property Consult_Date() As Date
		Get
			Return Me._Consult_Date
		End Get
		Set
			If ((Me._Consult_Date = value)  _
						= false) Then
				Me.OnConsult_DateChanging(value)
				Me.SendPropertyChanging
				Me._Consult_Date = value
				Me.SendPropertyChanged("Consult_Date")
				Me.OnConsult_DateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_User_Create", DbType:="BigInt")>  _
	Public Property User_Create() As System.Nullable(Of Long)
		Get
			Return Me._User_Create
		End Get
		Set
			If (Me._User_Create.Equals(value) = false) Then
				Me.OnUser_CreateChanging(value)
				Me.SendPropertyChanging
				Me._User_Create = value
				Me.SendPropertyChanged("User_Create")
				Me.OnUser_CreateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Check_Results")>  _
Partial Public Class Check_Result
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Result_ID As Long
	
	Private _Check_No As System.Nullable(Of Long)
	
	Private _Item_ID As System.Nullable(Of Integer)
	
	Private _Checked As System.Nullable(Of Boolean)
	
	Private _Note As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResult_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnResult_IDChanged()
    End Sub
    Partial Private Sub OnCheck_NoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCheck_NoChanged()
    End Sub
    Partial Private Sub OnItem_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItem_IDChanged()
    End Sub
    Partial Private Sub OnCheckedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCheckedChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Result_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Result_ID() As Long
		Get
			Return Me._Result_ID
		End Get
		Set
			If ((Me._Result_ID = value)  _
						= false) Then
				Me.OnResult_IDChanging(value)
				Me.SendPropertyChanging
				Me._Result_ID = value
				Me.SendPropertyChanged("Result_ID")
				Me.OnResult_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Check_No", DbType:="BigInt")>  _
	Public Property Check_No() As System.Nullable(Of Long)
		Get
			Return Me._Check_No
		End Get
		Set
			If (Me._Check_No.Equals(value) = false) Then
				Me.OnCheck_NoChanging(value)
				Me.SendPropertyChanging
				Me._Check_No = value
				Me.SendPropertyChanged("Check_No")
				Me.OnCheck_NoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Item_ID", DbType:="Int")>  _
	Public Property Item_ID() As System.Nullable(Of Integer)
		Get
			Return Me._Item_ID
		End Get
		Set
			If (Me._Item_ID.Equals(value) = false) Then
				Me.OnItem_IDChanging(value)
				Me.SendPropertyChanging
				Me._Item_ID = value
				Me.SendPropertyChanged("Item_ID")
				Me.OnItem_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Checked", DbType:="Bit")>  _
	Public Property Checked() As System.Nullable(Of Boolean)
		Get
			Return Me._Checked
		End Get
		Set
			If (Me._Checked.Equals(value) = false) Then
				Me.OnCheckedChanging(value)
				Me.SendPropertyChanging
				Me._Checked = value
				Me.SendPropertyChanged("Checked")
				Me.OnCheckedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Note", DbType:="VarChar(500)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
