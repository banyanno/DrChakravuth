'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSAnalysis"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSAnalysis
    Inherits Global.System.Data.DataSet
    
    Private tablePROVINCE_DIAGNOSIS As PROVINCE_DIAGNOSISDataTable
    
    Private tableVIEW_DIAGNOSI_COMPLAINT As VIEW_DIAGNOSI_COMPLAINTDataTable
    
    Private tableVIEW_DIAGNOSI_MEDICALHISTORY As VIEW_DIAGNOSI_MEDICALHISTORYDataTable
    
    Private tableVIEW_DIAGNOSI_PHYSICALCHECK As VIEW_DIAGNOSI_PHYSICALCHECKDataTable
    
    Private tableVIEW_PARAEXAM_BLOOD As VIEW_PARAEXAM_BLOODDataTable
    
    Private tableVIEW_PARAEXAM_FIBROSCOPY As VIEW_PARAEXAM_FIBROSCOPYDataTable
    
    Private tableVIEW_PARAEXAM_NASOGASTRO As VIEW_PARAEXAM_NASOGASTRODataTable
    
    Private tableVIEW_PARAEXAM_COLOSCOPY As VIEW_PARAEXAM_COLOSCOPYDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PROVINCE_DIAGNOSIS")) Is Nothing) Then
                MyBase.Tables.Add(New PROVINCE_DIAGNOSISDataTable(ds.Tables("PROVINCE_DIAGNOSIS")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_COMPLAINT")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_COMPLAINTDataTable(ds.Tables("VIEW_DIAGNOSI_COMPLAINT")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_MEDICALHISTORY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_MEDICALHISTORYDataTable(ds.Tables("VIEW_DIAGNOSI_MEDICALHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_PHYSICALCHECK")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_PHYSICALCHECKDataTable(ds.Tables("VIEW_DIAGNOSI_PHYSICALCHECK")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_BLOOD")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_BLOODDataTable(ds.Tables("VIEW_PARAEXAM_BLOOD")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_FIBROSCOPY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_FIBROSCOPYDataTable(ds.Tables("VIEW_PARAEXAM_FIBROSCOPY")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_NASOGASTRO")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_NASOGASTRODataTable(ds.Tables("VIEW_PARAEXAM_NASOGASTRO")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_COLOSCOPY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_COLOSCOPYDataTable(ds.Tables("VIEW_PARAEXAM_COLOSCOPY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROVINCE_DIAGNOSIS() As PROVINCE_DIAGNOSISDataTable
        Get
            Return Me.tablePROVINCE_DIAGNOSIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_DIAGNOSI_COMPLAINT() As VIEW_DIAGNOSI_COMPLAINTDataTable
        Get
            Return Me.tableVIEW_DIAGNOSI_COMPLAINT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_DIAGNOSI_MEDICALHISTORY() As VIEW_DIAGNOSI_MEDICALHISTORYDataTable
        Get
            Return Me.tableVIEW_DIAGNOSI_MEDICALHISTORY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_DIAGNOSI_PHYSICALCHECK() As VIEW_DIAGNOSI_PHYSICALCHECKDataTable
        Get
            Return Me.tableVIEW_DIAGNOSI_PHYSICALCHECK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARAEXAM_BLOOD() As VIEW_PARAEXAM_BLOODDataTable
        Get
            Return Me.tableVIEW_PARAEXAM_BLOOD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARAEXAM_FIBROSCOPY() As VIEW_PARAEXAM_FIBROSCOPYDataTable
        Get
            Return Me.tableVIEW_PARAEXAM_FIBROSCOPY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARAEXAM_NASOGASTRO() As VIEW_PARAEXAM_NASOGASTRODataTable
        Get
            Return Me.tableVIEW_PARAEXAM_NASOGASTRO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARAEXAM_COLOSCOPY() As VIEW_PARAEXAM_COLOSCOPYDataTable
        Get
            Return Me.tableVIEW_PARAEXAM_COLOSCOPY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSAnalysis = CType(MyBase.Clone,DSAnalysis)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PROVINCE_DIAGNOSIS")) Is Nothing) Then
                MyBase.Tables.Add(New PROVINCE_DIAGNOSISDataTable(ds.Tables("PROVINCE_DIAGNOSIS")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_COMPLAINT")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_COMPLAINTDataTable(ds.Tables("VIEW_DIAGNOSI_COMPLAINT")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_MEDICALHISTORY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_MEDICALHISTORYDataTable(ds.Tables("VIEW_DIAGNOSI_MEDICALHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_DIAGNOSI_PHYSICALCHECK")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_DIAGNOSI_PHYSICALCHECKDataTable(ds.Tables("VIEW_DIAGNOSI_PHYSICALCHECK")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_BLOOD")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_BLOODDataTable(ds.Tables("VIEW_PARAEXAM_BLOOD")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_FIBROSCOPY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_FIBROSCOPYDataTable(ds.Tables("VIEW_PARAEXAM_FIBROSCOPY")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_NASOGASTRO")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_NASOGASTRODataTable(ds.Tables("VIEW_PARAEXAM_NASOGASTRO")))
            End If
            If (Not (ds.Tables("VIEW_PARAEXAM_COLOSCOPY")) Is Nothing) Then
                MyBase.Tables.Add(New VIEW_PARAEXAM_COLOSCOPYDataTable(ds.Tables("VIEW_PARAEXAM_COLOSCOPY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePROVINCE_DIAGNOSIS = CType(MyBase.Tables("PROVINCE_DIAGNOSIS"),PROVINCE_DIAGNOSISDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROVINCE_DIAGNOSIS) Is Nothing) Then
                Me.tablePROVINCE_DIAGNOSIS.InitVars
            End If
        End If
        Me.tableVIEW_DIAGNOSI_COMPLAINT = CType(MyBase.Tables("VIEW_DIAGNOSI_COMPLAINT"),VIEW_DIAGNOSI_COMPLAINTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_DIAGNOSI_COMPLAINT) Is Nothing) Then
                Me.tableVIEW_DIAGNOSI_COMPLAINT.InitVars
            End If
        End If
        Me.tableVIEW_DIAGNOSI_MEDICALHISTORY = CType(MyBase.Tables("VIEW_DIAGNOSI_MEDICALHISTORY"),VIEW_DIAGNOSI_MEDICALHISTORYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_DIAGNOSI_MEDICALHISTORY) Is Nothing) Then
                Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.InitVars
            End If
        End If
        Me.tableVIEW_DIAGNOSI_PHYSICALCHECK = CType(MyBase.Tables("VIEW_DIAGNOSI_PHYSICALCHECK"),VIEW_DIAGNOSI_PHYSICALCHECKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_DIAGNOSI_PHYSICALCHECK) Is Nothing) Then
                Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.InitVars
            End If
        End If
        Me.tableVIEW_PARAEXAM_BLOOD = CType(MyBase.Tables("VIEW_PARAEXAM_BLOOD"),VIEW_PARAEXAM_BLOODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_PARAEXAM_BLOOD) Is Nothing) Then
                Me.tableVIEW_PARAEXAM_BLOOD.InitVars
            End If
        End If
        Me.tableVIEW_PARAEXAM_FIBROSCOPY = CType(MyBase.Tables("VIEW_PARAEXAM_FIBROSCOPY"),VIEW_PARAEXAM_FIBROSCOPYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_PARAEXAM_FIBROSCOPY) Is Nothing) Then
                Me.tableVIEW_PARAEXAM_FIBROSCOPY.InitVars
            End If
        End If
        Me.tableVIEW_PARAEXAM_NASOGASTRO = CType(MyBase.Tables("VIEW_PARAEXAM_NASOGASTRO"),VIEW_PARAEXAM_NASOGASTRODataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_PARAEXAM_NASOGASTRO) Is Nothing) Then
                Me.tableVIEW_PARAEXAM_NASOGASTRO.InitVars
            End If
        End If
        Me.tableVIEW_PARAEXAM_COLOSCOPY = CType(MyBase.Tables("VIEW_PARAEXAM_COLOSCOPY"),VIEW_PARAEXAM_COLOSCOPYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVIEW_PARAEXAM_COLOSCOPY) Is Nothing) Then
                Me.tableVIEW_PARAEXAM_COLOSCOPY.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSAnalysis"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSAnalysis.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePROVINCE_DIAGNOSIS = New PROVINCE_DIAGNOSISDataTable
        MyBase.Tables.Add(Me.tablePROVINCE_DIAGNOSIS)
        Me.tableVIEW_DIAGNOSI_COMPLAINT = New VIEW_DIAGNOSI_COMPLAINTDataTable
        MyBase.Tables.Add(Me.tableVIEW_DIAGNOSI_COMPLAINT)
        Me.tableVIEW_DIAGNOSI_MEDICALHISTORY = New VIEW_DIAGNOSI_MEDICALHISTORYDataTable
        MyBase.Tables.Add(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY)
        Me.tableVIEW_DIAGNOSI_PHYSICALCHECK = New VIEW_DIAGNOSI_PHYSICALCHECKDataTable
        MyBase.Tables.Add(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK)
        Me.tableVIEW_PARAEXAM_BLOOD = New VIEW_PARAEXAM_BLOODDataTable
        MyBase.Tables.Add(Me.tableVIEW_PARAEXAM_BLOOD)
        Me.tableVIEW_PARAEXAM_FIBROSCOPY = New VIEW_PARAEXAM_FIBROSCOPYDataTable
        MyBase.Tables.Add(Me.tableVIEW_PARAEXAM_FIBROSCOPY)
        Me.tableVIEW_PARAEXAM_NASOGASTRO = New VIEW_PARAEXAM_NASOGASTRODataTable
        MyBase.Tables.Add(Me.tableVIEW_PARAEXAM_NASOGASTRO)
        Me.tableVIEW_PARAEXAM_COLOSCOPY = New VIEW_PARAEXAM_COLOSCOPYDataTable
        MyBase.Tables.Add(Me.tableVIEW_PARAEXAM_COLOSCOPY)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROVINCE_DIAGNOSIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_DIAGNOSI_COMPLAINT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_DIAGNOSI_MEDICALHISTORY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_DIAGNOSI_PHYSICALCHECK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_PARAEXAM_BLOOD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_PARAEXAM_FIBROSCOPY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_PARAEXAM_NASOGASTRO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVIEW_PARAEXAM_COLOSCOPY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSAnalysis = New DSAnalysis
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PROVINCE_DIAGNOSISRowChangeEventHandler(ByVal sender As Object, ByVal e As PROVINCE_DIAGNOSISRowChangeEvent)
    
    Public Delegate Sub VIEW_DIAGNOSI_COMPLAINTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_DIAGNOSI_COMPLAINTRowChangeEvent)
    
    Public Delegate Sub VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent)
    
    Public Delegate Sub VIEW_PARAEXAM_BLOODRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARAEXAM_BLOODRowChangeEvent)
    
    Public Delegate Sub VIEW_PARAEXAM_FIBROSCOPYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARAEXAM_NASOGASTRORowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARAEXAM_NASOGASTRORowChangeEvent)
    
    Public Delegate Sub VIEW_PARAEXAM_COLOSCOPYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARAEXAM_COLOSCOPYRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROVINCE_DIAGNOSISDataTable
        Inherits Global.System.Data.TypedTableBase(Of PROVINCE_DIAGNOSISRow)
        
        Private columnppatientid As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpcontactaddress As Global.System.Data.DataColumn
        
        Private columnprescriptionid As Global.System.Data.DataColumn
        
        Private columndiagnosis As Global.System.Data.DataColumn
        
        Private columnCheckdate As Global.System.Data.DataColumn
        
        Private columnpname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROVINCE_DIAGNOSIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ppatientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnppatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pcontactaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcontactaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prescriptionidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprescriptionid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROVINCE_DIAGNOSISRow
            Get
                Return CType(Me.Rows(index),PROVINCE_DIAGNOSISRow)
            End Get
        End Property
        
        Public Event PROVINCE_DIAGNOSISRowChanging As PROVINCE_DIAGNOSISRowChangeEventHandler
        
        Public Event PROVINCE_DIAGNOSISRowChanged As PROVINCE_DIAGNOSISRowChangeEventHandler
        
        Public Event PROVINCE_DIAGNOSISRowDeleting As PROVINCE_DIAGNOSISRowChangeEventHandler
        
        Public Event PROVINCE_DIAGNOSISRowDeleted As PROVINCE_DIAGNOSISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROVINCE_DIAGNOSISRow(ByVal row As PROVINCE_DIAGNOSISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROVINCE_DIAGNOSISRow(ByVal ppatientid As Long, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal pcontactaddress As String, ByVal prescriptionid As Long, ByVal diagnosis As String, ByVal Checkdate As Date, ByVal pname As String) As PROVINCE_DIAGNOSISRow
            Dim rowPROVINCE_DIAGNOSISRow As PROVINCE_DIAGNOSISRow = CType(Me.NewRow,PROVINCE_DIAGNOSISRow)
            Dim columnValuesArray() As Object = New Object() {ppatientid, pgender, pAge, Age, pcontactaddress, prescriptionid, diagnosis, Checkdate, pname}
            rowPROVINCE_DIAGNOSISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROVINCE_DIAGNOSISRow)
            Return rowPROVINCE_DIAGNOSISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROVINCE_DIAGNOSISDataTable = CType(MyBase.Clone,PROVINCE_DIAGNOSISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROVINCE_DIAGNOSISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnppatientid = MyBase.Columns("ppatientid")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpcontactaddress = MyBase.Columns("pcontactaddress")
            Me.columnprescriptionid = MyBase.Columns("prescriptionid")
            Me.columndiagnosis = MyBase.Columns("diagnosis")
            Me.columnCheckdate = MyBase.Columns("Checkdate")
            Me.columnpname = MyBase.Columns("pname")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnppatientid = New Global.System.Data.DataColumn("ppatientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnppatientid)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpcontactaddress = New Global.System.Data.DataColumn("pcontactaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcontactaddress)
            Me.columnprescriptionid = New Global.System.Data.DataColumn("prescriptionid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprescriptionid)
            Me.columndiagnosis = New Global.System.Data.DataColumn("diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiagnosis)
            Me.columnCheckdate = New Global.System.Data.DataColumn("Checkdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckdate)
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender.MaxLength = 10
            Me.columnpcontactaddress.MaxLength = 500
            Me.columnprescriptionid.AllowDBNull = false
            Me.columndiagnosis.AllowDBNull = false
            Me.columndiagnosis.MaxLength = 500
            Me.columnCheckdate.AllowDBNull = false
            Me.columnpname.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROVINCE_DIAGNOSISRow() As PROVINCE_DIAGNOSISRow
            Return CType(Me.NewRow,PROVINCE_DIAGNOSISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROVINCE_DIAGNOSISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROVINCE_DIAGNOSISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROVINCE_DIAGNOSISRowChangedEvent) Is Nothing) Then
                RaiseEvent PROVINCE_DIAGNOSISRowChanged(Me, New PROVINCE_DIAGNOSISRowChangeEvent(CType(e.Row,PROVINCE_DIAGNOSISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROVINCE_DIAGNOSISRowChangingEvent) Is Nothing) Then
                RaiseEvent PROVINCE_DIAGNOSISRowChanging(Me, New PROVINCE_DIAGNOSISRowChangeEvent(CType(e.Row,PROVINCE_DIAGNOSISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROVINCE_DIAGNOSISRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROVINCE_DIAGNOSISRowDeleted(Me, New PROVINCE_DIAGNOSISRowChangeEvent(CType(e.Row,PROVINCE_DIAGNOSISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROVINCE_DIAGNOSISRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROVINCE_DIAGNOSISRowDeleting(Me, New PROVINCE_DIAGNOSISRowChangeEvent(CType(e.Row,PROVINCE_DIAGNOSISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROVINCE_DIAGNOSISRow(ByVal row As PROVINCE_DIAGNOSISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROVINCE_DIAGNOSISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_DIAGNOSI_COMPLAINTDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_DIAGNOSI_COMPLAINTRow)
        
        Private columnpatientid As Global.System.Data.DataColumn
        
        Private columndoctorid As Global.System.Data.DataColumn
        
        Private columndiagnosis As Global.System.Data.DataColumn
        
        Private columnCheckdate As Global.System.Data.DataColumn
        
        Private columnconsulttype As Global.System.Data.DataColumn
        
        Private columncomplaint As Global.System.Data.DataColumn
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnprescriptionid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_DIAGNOSI_COMPLAINT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property patientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property doctoridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoctorid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property consulttypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconsulttype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property complaintColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomplaint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prescriptionidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprescriptionid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_DIAGNOSI_COMPLAINTRow
            Get
                Return CType(Me.Rows(index),VIEW_DIAGNOSI_COMPLAINTRow)
            End Get
        End Property
        
        Public Event VIEW_DIAGNOSI_COMPLAINTRowChanging As VIEW_DIAGNOSI_COMPLAINTRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_COMPLAINTRowChanged As VIEW_DIAGNOSI_COMPLAINTRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_COMPLAINTRowDeleting As VIEW_DIAGNOSI_COMPLAINTRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_COMPLAINTRowDeleted As VIEW_DIAGNOSI_COMPLAINTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_DIAGNOSI_COMPLAINTRow(ByVal row As VIEW_DIAGNOSI_COMPLAINTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_DIAGNOSI_COMPLAINTRow(ByVal patientid As Long, ByVal doctorid As Integer, ByVal diagnosis As String, ByVal Checkdate As Date, ByVal consulttype As String, ByVal complaint As String, ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal prescriptionid As Long) As VIEW_DIAGNOSI_COMPLAINTRow
            Dim rowVIEW_DIAGNOSI_COMPLAINTRow As VIEW_DIAGNOSI_COMPLAINTRow = CType(Me.NewRow,VIEW_DIAGNOSI_COMPLAINTRow)
            Dim columnValuesArray() As Object = New Object() {patientid, doctorid, diagnosis, Checkdate, consulttype, complaint, pname, pgender, pAge, Age, prescriptionid}
            rowVIEW_DIAGNOSI_COMPLAINTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_DIAGNOSI_COMPLAINTRow)
            Return rowVIEW_DIAGNOSI_COMPLAINTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_DIAGNOSI_COMPLAINTDataTable = CType(MyBase.Clone,VIEW_DIAGNOSI_COMPLAINTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_DIAGNOSI_COMPLAINTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpatientid = MyBase.Columns("patientid")
            Me.columndoctorid = MyBase.Columns("doctorid")
            Me.columndiagnosis = MyBase.Columns("diagnosis")
            Me.columnCheckdate = MyBase.Columns("Checkdate")
            Me.columnconsulttype = MyBase.Columns("consulttype")
            Me.columncomplaint = MyBase.Columns("complaint")
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnprescriptionid = MyBase.Columns("prescriptionid")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpatientid = New Global.System.Data.DataColumn("patientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpatientid)
            Me.columndoctorid = New Global.System.Data.DataColumn("doctorid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoctorid)
            Me.columndiagnosis = New Global.System.Data.DataColumn("diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiagnosis)
            Me.columnCheckdate = New Global.System.Data.DataColumn("Checkdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckdate)
            Me.columnconsulttype = New Global.System.Data.DataColumn("consulttype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconsulttype)
            Me.columncomplaint = New Global.System.Data.DataColumn("complaint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomplaint)
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnprescriptionid = New Global.System.Data.DataColumn("prescriptionid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprescriptionid)
            Me.columndiagnosis.MaxLength = 500
            Me.columnconsulttype.MaxLength = 250
            Me.columncomplaint.MaxLength = 500
            Me.columnpname.MaxLength = 200
            Me.columnpgender.MaxLength = 10
            Me.columnprescriptionid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_DIAGNOSI_COMPLAINTRow() As VIEW_DIAGNOSI_COMPLAINTRow
            Return CType(Me.NewRow,VIEW_DIAGNOSI_COMPLAINTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_DIAGNOSI_COMPLAINTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_DIAGNOSI_COMPLAINTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_DIAGNOSI_COMPLAINTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_COMPLAINTRowChanged(Me, New VIEW_DIAGNOSI_COMPLAINTRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_COMPLAINTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_DIAGNOSI_COMPLAINTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_COMPLAINTRowChanging(Me, New VIEW_DIAGNOSI_COMPLAINTRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_COMPLAINTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_DIAGNOSI_COMPLAINTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_COMPLAINTRowDeleted(Me, New VIEW_DIAGNOSI_COMPLAINTRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_COMPLAINTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_DIAGNOSI_COMPLAINTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_COMPLAINTRowDeleting(Me, New VIEW_DIAGNOSI_COMPLAINTRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_COMPLAINTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_DIAGNOSI_COMPLAINTRow(ByVal row As VIEW_DIAGNOSI_COMPLAINTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_DIAGNOSI_COMPLAINTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_DIAGNOSI_MEDICALHISTORYDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_DIAGNOSI_MEDICALHISTORYRow)
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpatientid As Global.System.Data.DataColumn
        
        Private columndoctorid As Global.System.Data.DataColumn
        
        Private columndiagnosis As Global.System.Data.DataColumn
        
        Private columnCheckdate As Global.System.Data.DataColumn
        
        Private columnconsulttype As Global.System.Data.DataColumn
        
        Private columnprescriptionid As Global.System.Data.DataColumn
        
        Private columnhistory As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_DIAGNOSI_MEDICALHISTORY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property patientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property doctoridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoctorid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property consulttypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconsulttype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prescriptionidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprescriptionid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property historyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhistory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_DIAGNOSI_MEDICALHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_DIAGNOSI_MEDICALHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_DIAGNOSI_MEDICALHISTORYRowChanging As VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_MEDICALHISTORYRowChanged As VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_MEDICALHISTORYRowDeleting As VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_MEDICALHISTORYRowDeleted As VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_DIAGNOSI_MEDICALHISTORYRow(ByVal row As VIEW_DIAGNOSI_MEDICALHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_DIAGNOSI_MEDICALHISTORYRow(ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal patientid As Long, ByVal doctorid As Integer, ByVal diagnosis As String, ByVal Checkdate As Date, ByVal consulttype As String, ByVal prescriptionid As Long, ByVal history As String) As VIEW_DIAGNOSI_MEDICALHISTORYRow
            Dim rowVIEW_DIAGNOSI_MEDICALHISTORYRow As VIEW_DIAGNOSI_MEDICALHISTORYRow = CType(Me.NewRow,VIEW_DIAGNOSI_MEDICALHISTORYRow)
            Dim columnValuesArray() As Object = New Object() {pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, consulttype, prescriptionid, history}
            rowVIEW_DIAGNOSI_MEDICALHISTORYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_DIAGNOSI_MEDICALHISTORYRow)
            Return rowVIEW_DIAGNOSI_MEDICALHISTORYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_DIAGNOSI_MEDICALHISTORYDataTable = CType(MyBase.Clone,VIEW_DIAGNOSI_MEDICALHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_DIAGNOSI_MEDICALHISTORYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpatientid = MyBase.Columns("patientid")
            Me.columndoctorid = MyBase.Columns("doctorid")
            Me.columndiagnosis = MyBase.Columns("diagnosis")
            Me.columnCheckdate = MyBase.Columns("Checkdate")
            Me.columnconsulttype = MyBase.Columns("consulttype")
            Me.columnprescriptionid = MyBase.Columns("prescriptionid")
            Me.columnhistory = MyBase.Columns("history")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpatientid = New Global.System.Data.DataColumn("patientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpatientid)
            Me.columndoctorid = New Global.System.Data.DataColumn("doctorid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoctorid)
            Me.columndiagnosis = New Global.System.Data.DataColumn("diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiagnosis)
            Me.columnCheckdate = New Global.System.Data.DataColumn("Checkdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckdate)
            Me.columnconsulttype = New Global.System.Data.DataColumn("consulttype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconsulttype)
            Me.columnprescriptionid = New Global.System.Data.DataColumn("prescriptionid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprescriptionid)
            Me.columnhistory = New Global.System.Data.DataColumn("history", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhistory)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpatientid.AllowDBNull = false
            Me.columndoctorid.AllowDBNull = false
            Me.columndiagnosis.AllowDBNull = false
            Me.columndiagnosis.MaxLength = 500
            Me.columnCheckdate.AllowDBNull = false
            Me.columnconsulttype.AllowDBNull = false
            Me.columnconsulttype.MaxLength = 250
            Me.columnprescriptionid.AllowDBNull = false
            Me.columnhistory.AllowDBNull = false
            Me.columnhistory.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_DIAGNOSI_MEDICALHISTORYRow() As VIEW_DIAGNOSI_MEDICALHISTORYRow
            Return CType(Me.NewRow,VIEW_DIAGNOSI_MEDICALHISTORYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_DIAGNOSI_MEDICALHISTORYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_DIAGNOSI_MEDICALHISTORYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_DIAGNOSI_MEDICALHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_MEDICALHISTORYRowChanged(Me, New VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_MEDICALHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_DIAGNOSI_MEDICALHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_MEDICALHISTORYRowChanging(Me, New VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_MEDICALHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_DIAGNOSI_MEDICALHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_MEDICALHISTORYRowDeleted(Me, New VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_MEDICALHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_DIAGNOSI_MEDICALHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_MEDICALHISTORYRowDeleting(Me, New VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_MEDICALHISTORYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_DIAGNOSI_MEDICALHISTORYRow(ByVal row As VIEW_DIAGNOSI_MEDICALHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_DIAGNOSI_MEDICALHISTORYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_DIAGNOSI_PHYSICALCHECKDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_DIAGNOSI_PHYSICALCHECKRow)
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpatientid As Global.System.Data.DataColumn
        
        Private columndoctorid As Global.System.Data.DataColumn
        
        Private columndiagnosis As Global.System.Data.DataColumn
        
        Private columnCheckdate As Global.System.Data.DataColumn
        
        Private columnconsulttype As Global.System.Data.DataColumn
        
        Private columnprescriptionid As Global.System.Data.DataColumn
        
        Private columnphysicalcheckid As Global.System.Data.DataColumn
        
        Private columnphysicalcheck As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_DIAGNOSI_PHYSICALCHECK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property patientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property doctoridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoctorid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property consulttypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconsulttype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prescriptionidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprescriptionid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property physicalcheckidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphysicalcheckid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property physicalcheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphysicalcheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_DIAGNOSI_PHYSICALCHECKRow
            Get
                Return CType(Me.Rows(index),VIEW_DIAGNOSI_PHYSICALCHECKRow)
            End Get
        End Property
        
        Public Event VIEW_DIAGNOSI_PHYSICALCHECKRowChanging As VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_PHYSICALCHECKRowChanged As VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_PHYSICALCHECKRowDeleting As VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEventHandler
        
        Public Event VIEW_DIAGNOSI_PHYSICALCHECKRowDeleted As VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_DIAGNOSI_PHYSICALCHECKRow(ByVal row As VIEW_DIAGNOSI_PHYSICALCHECKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_DIAGNOSI_PHYSICALCHECKRow(ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal patientid As Long, ByVal doctorid As Integer, ByVal diagnosis As String, ByVal Checkdate As Date, ByVal consulttype As String, ByVal prescriptionid As Long, ByVal physicalcheck As String) As VIEW_DIAGNOSI_PHYSICALCHECKRow
            Dim rowVIEW_DIAGNOSI_PHYSICALCHECKRow As VIEW_DIAGNOSI_PHYSICALCHECKRow = CType(Me.NewRow,VIEW_DIAGNOSI_PHYSICALCHECKRow)
            Dim columnValuesArray() As Object = New Object() {pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, consulttype, prescriptionid, Nothing, physicalcheck}
            rowVIEW_DIAGNOSI_PHYSICALCHECKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_DIAGNOSI_PHYSICALCHECKRow)
            Return rowVIEW_DIAGNOSI_PHYSICALCHECKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_DIAGNOSI_PHYSICALCHECKDataTable = CType(MyBase.Clone,VIEW_DIAGNOSI_PHYSICALCHECKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_DIAGNOSI_PHYSICALCHECKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpatientid = MyBase.Columns("patientid")
            Me.columndoctorid = MyBase.Columns("doctorid")
            Me.columndiagnosis = MyBase.Columns("diagnosis")
            Me.columnCheckdate = MyBase.Columns("Checkdate")
            Me.columnconsulttype = MyBase.Columns("consulttype")
            Me.columnprescriptionid = MyBase.Columns("prescriptionid")
            Me.columnphysicalcheckid = MyBase.Columns("physicalcheckid")
            Me.columnphysicalcheck = MyBase.Columns("physicalcheck")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpatientid = New Global.System.Data.DataColumn("patientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpatientid)
            Me.columndoctorid = New Global.System.Data.DataColumn("doctorid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoctorid)
            Me.columndiagnosis = New Global.System.Data.DataColumn("diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiagnosis)
            Me.columnCheckdate = New Global.System.Data.DataColumn("Checkdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckdate)
            Me.columnconsulttype = New Global.System.Data.DataColumn("consulttype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconsulttype)
            Me.columnprescriptionid = New Global.System.Data.DataColumn("prescriptionid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprescriptionid)
            Me.columnphysicalcheckid = New Global.System.Data.DataColumn("physicalcheckid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphysicalcheckid)
            Me.columnphysicalcheck = New Global.System.Data.DataColumn("physicalcheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphysicalcheck)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpatientid.AllowDBNull = false
            Me.columndoctorid.AllowDBNull = false
            Me.columndiagnosis.AllowDBNull = false
            Me.columndiagnosis.MaxLength = 500
            Me.columnCheckdate.AllowDBNull = false
            Me.columnconsulttype.AllowDBNull = false
            Me.columnconsulttype.MaxLength = 250
            Me.columnprescriptionid.AllowDBNull = false
            Me.columnphysicalcheckid.AutoIncrement = true
            Me.columnphysicalcheckid.AutoIncrementSeed = -1
            Me.columnphysicalcheckid.AutoIncrementStep = -1
            Me.columnphysicalcheckid.AllowDBNull = false
            Me.columnphysicalcheckid.ReadOnly = true
            Me.columnphysicalcheck.AllowDBNull = false
            Me.columnphysicalcheck.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_DIAGNOSI_PHYSICALCHECKRow() As VIEW_DIAGNOSI_PHYSICALCHECKRow
            Return CType(Me.NewRow,VIEW_DIAGNOSI_PHYSICALCHECKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_DIAGNOSI_PHYSICALCHECKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_DIAGNOSI_PHYSICALCHECKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_DIAGNOSI_PHYSICALCHECKRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_PHYSICALCHECKRowChanged(Me, New VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_PHYSICALCHECKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_DIAGNOSI_PHYSICALCHECKRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_PHYSICALCHECKRowChanging(Me, New VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_PHYSICALCHECKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_DIAGNOSI_PHYSICALCHECKRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_PHYSICALCHECKRowDeleted(Me, New VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_PHYSICALCHECKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_DIAGNOSI_PHYSICALCHECKRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_DIAGNOSI_PHYSICALCHECKRowDeleting(Me, New VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent(CType(e.Row,VIEW_DIAGNOSI_PHYSICALCHECKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_DIAGNOSI_PHYSICALCHECKRow(ByVal row As VIEW_DIAGNOSI_PHYSICALCHECKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_DIAGNOSI_PHYSICALCHECKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_PARAEXAM_BLOODDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_PARAEXAM_BLOODRow)
        
        Private columnppatientid As Global.System.Data.DataColumn
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpcontactaddress As Global.System.Data.DataColumn
        
        Private columnrequest_date As Global.System.Data.DataColumn
        
        Private columnDoctor_ID As Global.System.Data.DataColumn
        
        Private columnitem_name As Global.System.Data.DataColumn
        
        Private columnresult As Global.System.Data.DataColumn
        
        Private columnitem_id As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_PARAEXAM_BLOOD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ppatientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnppatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pcontactaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcontactaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doctor_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoctor_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property item_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitem_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property item_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitem_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARAEXAM_BLOODRow
            Get
                Return CType(Me.Rows(index),VIEW_PARAEXAM_BLOODRow)
            End Get
        End Property
        
        Public Event VIEW_PARAEXAM_BLOODRowChanging As VIEW_PARAEXAM_BLOODRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_BLOODRowChanged As VIEW_PARAEXAM_BLOODRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_BLOODRowDeleting As VIEW_PARAEXAM_BLOODRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_BLOODRowDeleted As VIEW_PARAEXAM_BLOODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_PARAEXAM_BLOODRow(ByVal row As VIEW_PARAEXAM_BLOODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_PARAEXAM_BLOODRow(ByVal ppatientid As Long, ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal pcontactaddress As String, ByVal request_date As Date, ByVal Doctor_ID As Integer, ByVal item_name As String, ByVal result As String, ByVal Diagnosis As String) As VIEW_PARAEXAM_BLOODRow
            Dim rowVIEW_PARAEXAM_BLOODRow As VIEW_PARAEXAM_BLOODRow = CType(Me.NewRow,VIEW_PARAEXAM_BLOODRow)
            Dim columnValuesArray() As Object = New Object() {ppatientid, pname, pgender, pAge, Age, pcontactaddress, request_date, Doctor_ID, item_name, result, Nothing, Diagnosis}
            rowVIEW_PARAEXAM_BLOODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_PARAEXAM_BLOODRow)
            Return rowVIEW_PARAEXAM_BLOODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_PARAEXAM_BLOODDataTable = CType(MyBase.Clone,VIEW_PARAEXAM_BLOODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_PARAEXAM_BLOODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnppatientid = MyBase.Columns("ppatientid")
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpcontactaddress = MyBase.Columns("pcontactaddress")
            Me.columnrequest_date = MyBase.Columns("request_date")
            Me.columnDoctor_ID = MyBase.Columns("Doctor_ID")
            Me.columnitem_name = MyBase.Columns("item_name")
            Me.columnresult = MyBase.Columns("result")
            Me.columnitem_id = MyBase.Columns("item_id")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnppatientid = New Global.System.Data.DataColumn("ppatientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnppatientid)
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpcontactaddress = New Global.System.Data.DataColumn("pcontactaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcontactaddress)
            Me.columnrequest_date = New Global.System.Data.DataColumn("request_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_date)
            Me.columnDoctor_ID = New Global.System.Data.DataColumn("Doctor_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoctor_ID)
            Me.columnitem_name = New Global.System.Data.DataColumn("item_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitem_name)
            Me.columnresult = New Global.System.Data.DataColumn("result", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresult)
            Me.columnitem_id = New Global.System.Data.DataColumn("item_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitem_id)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpcontactaddress.AllowDBNull = false
            Me.columnpcontactaddress.MaxLength = 500
            Me.columnitem_name.MaxLength = 250
            Me.columnresult.MaxLength = 250
            Me.columnitem_id.AutoIncrement = true
            Me.columnitem_id.AutoIncrementSeed = -1
            Me.columnitem_id.AutoIncrementStep = -1
            Me.columnitem_id.AllowDBNull = false
            Me.columnitem_id.ReadOnly = true
            Me.columnDiagnosis.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_PARAEXAM_BLOODRow() As VIEW_PARAEXAM_BLOODRow
            Return CType(Me.NewRow,VIEW_PARAEXAM_BLOODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_PARAEXAM_BLOODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_PARAEXAM_BLOODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARAEXAM_BLOODRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_BLOODRowChanged(Me, New VIEW_PARAEXAM_BLOODRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_BLOODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARAEXAM_BLOODRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_BLOODRowChanging(Me, New VIEW_PARAEXAM_BLOODRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_BLOODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARAEXAM_BLOODRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_BLOODRowDeleted(Me, New VIEW_PARAEXAM_BLOODRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_BLOODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARAEXAM_BLOODRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_BLOODRowDeleting(Me, New VIEW_PARAEXAM_BLOODRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_BLOODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_PARAEXAM_BLOODRow(ByVal row As VIEW_PARAEXAM_BLOODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_PARAEXAM_BLOODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_PARAEXAM_FIBROSCOPYDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_PARAEXAM_FIBROSCOPYRow)
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpcontactaddress As Global.System.Data.DataColumn
        
        Private columnppatientid As Global.System.Data.DataColumn
        
        Private columnrequest_date As Global.System.Data.DataColumn
        
        Private columnDoctor_ID As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnconclusion_id As Global.System.Data.DataColumn
        
        Private columnconclusion_name As Global.System.Data.DataColumn
        
        Private columnrequest_id As Global.System.Data.DataColumn
        
        Private columnmotify As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_PARAEXAM_FIBROSCOPY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pcontactaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcontactaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ppatientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnppatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doctor_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoctor_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conclusion_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconclusion_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conclusion_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconclusion_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motifyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotify
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARAEXAM_FIBROSCOPYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARAEXAM_FIBROSCOPYRow)
            End Get
        End Property
        
        Public Event VIEW_PARAEXAM_FIBROSCOPYRowChanging As VIEW_PARAEXAM_FIBROSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_FIBROSCOPYRowChanged As VIEW_PARAEXAM_FIBROSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_FIBROSCOPYRowDeleting As VIEW_PARAEXAM_FIBROSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_FIBROSCOPYRowDeleted As VIEW_PARAEXAM_FIBROSCOPYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_PARAEXAM_FIBROSCOPYRow(ByVal row As VIEW_PARAEXAM_FIBROSCOPYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_PARAEXAM_FIBROSCOPYRow(ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal pcontactaddress As String, ByVal ppatientid As Long, ByVal request_date As Date, ByVal Doctor_ID As Integer, ByVal Diagnosis As String, ByVal conclusion_id As Integer, ByVal conclusion_name As String, ByVal motify As String) As VIEW_PARAEXAM_FIBROSCOPYRow
            Dim rowVIEW_PARAEXAM_FIBROSCOPYRow As VIEW_PARAEXAM_FIBROSCOPYRow = CType(Me.NewRow,VIEW_PARAEXAM_FIBROSCOPYRow)
            Dim columnValuesArray() As Object = New Object() {pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, Doctor_ID, Diagnosis, conclusion_id, conclusion_name, Nothing, motify}
            rowVIEW_PARAEXAM_FIBROSCOPYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_PARAEXAM_FIBROSCOPYRow)
            Return rowVIEW_PARAEXAM_FIBROSCOPYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_PARAEXAM_FIBROSCOPYDataTable = CType(MyBase.Clone,VIEW_PARAEXAM_FIBROSCOPYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_PARAEXAM_FIBROSCOPYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpcontactaddress = MyBase.Columns("pcontactaddress")
            Me.columnppatientid = MyBase.Columns("ppatientid")
            Me.columnrequest_date = MyBase.Columns("request_date")
            Me.columnDoctor_ID = MyBase.Columns("Doctor_ID")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnconclusion_id = MyBase.Columns("conclusion_id")
            Me.columnconclusion_name = MyBase.Columns("conclusion_name")
            Me.columnrequest_id = MyBase.Columns("request_id")
            Me.columnmotify = MyBase.Columns("motify")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpcontactaddress = New Global.System.Data.DataColumn("pcontactaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcontactaddress)
            Me.columnppatientid = New Global.System.Data.DataColumn("ppatientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnppatientid)
            Me.columnrequest_date = New Global.System.Data.DataColumn("request_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_date)
            Me.columnDoctor_ID = New Global.System.Data.DataColumn("Doctor_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoctor_ID)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnconclusion_id = New Global.System.Data.DataColumn("conclusion_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconclusion_id)
            Me.columnconclusion_name = New Global.System.Data.DataColumn("conclusion_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconclusion_name)
            Me.columnrequest_id = New Global.System.Data.DataColumn("request_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_id)
            Me.columnmotify = New Global.System.Data.DataColumn("motify", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotify)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpcontactaddress.AllowDBNull = false
            Me.columnpcontactaddress.MaxLength = 500
            Me.columnDiagnosis.MaxLength = 150
            Me.columnconclusion_name.MaxLength = 250
            Me.columnrequest_id.AutoIncrement = true
            Me.columnrequest_id.AutoIncrementSeed = -1
            Me.columnrequest_id.AutoIncrementStep = -1
            Me.columnrequest_id.AllowDBNull = false
            Me.columnrequest_id.ReadOnly = true
            Me.columnmotify.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_PARAEXAM_FIBROSCOPYRow() As VIEW_PARAEXAM_FIBROSCOPYRow
            Return CType(Me.NewRow,VIEW_PARAEXAM_FIBROSCOPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_PARAEXAM_FIBROSCOPYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_PARAEXAM_FIBROSCOPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARAEXAM_FIBROSCOPYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_FIBROSCOPYRowChanged(Me, New VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_FIBROSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARAEXAM_FIBROSCOPYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_FIBROSCOPYRowChanging(Me, New VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_FIBROSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARAEXAM_FIBROSCOPYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_FIBROSCOPYRowDeleted(Me, New VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_FIBROSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARAEXAM_FIBROSCOPYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_FIBROSCOPYRowDeleting(Me, New VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_FIBROSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_PARAEXAM_FIBROSCOPYRow(ByVal row As VIEW_PARAEXAM_FIBROSCOPYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_PARAEXAM_FIBROSCOPYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_PARAEXAM_NASOGASTRODataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_PARAEXAM_NASOGASTRORow)
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpcontactaddress As Global.System.Data.DataColumn
        
        Private columnppatientid As Global.System.Data.DataColumn
        
        Private columnrequest_date As Global.System.Data.DataColumn
        
        Private columnDoctor_ID As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnconclusion_id As Global.System.Data.DataColumn
        
        Private columnconclusion_name As Global.System.Data.DataColumn
        
        Private columnmotify As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_PARAEXAM_NASOGASTRO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pcontactaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcontactaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ppatientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnppatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doctor_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoctor_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conclusion_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconclusion_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conclusion_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconclusion_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motifyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotify
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARAEXAM_NASOGASTRORow
            Get
                Return CType(Me.Rows(index),VIEW_PARAEXAM_NASOGASTRORow)
            End Get
        End Property
        
        Public Event VIEW_PARAEXAM_NASOGASTRORowChanging As VIEW_PARAEXAM_NASOGASTRORowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_NASOGASTRORowChanged As VIEW_PARAEXAM_NASOGASTRORowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_NASOGASTRORowDeleting As VIEW_PARAEXAM_NASOGASTRORowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_NASOGASTRORowDeleted As VIEW_PARAEXAM_NASOGASTRORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_PARAEXAM_NASOGASTRORow(ByVal row As VIEW_PARAEXAM_NASOGASTRORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_PARAEXAM_NASOGASTRORow(ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal pcontactaddress As String, ByVal ppatientid As Long, ByVal request_date As Date, ByVal Doctor_ID As Integer, ByVal Diagnosis As String, ByVal conclusion_id As Integer, ByVal conclusion_name As String, ByVal motify As String) As VIEW_PARAEXAM_NASOGASTRORow
            Dim rowVIEW_PARAEXAM_NASOGASTRORow As VIEW_PARAEXAM_NASOGASTRORow = CType(Me.NewRow,VIEW_PARAEXAM_NASOGASTRORow)
            Dim columnValuesArray() As Object = New Object() {pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, Doctor_ID, Diagnosis, conclusion_id, conclusion_name, motify}
            rowVIEW_PARAEXAM_NASOGASTRORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_PARAEXAM_NASOGASTRORow)
            Return rowVIEW_PARAEXAM_NASOGASTRORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_PARAEXAM_NASOGASTRODataTable = CType(MyBase.Clone,VIEW_PARAEXAM_NASOGASTRODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_PARAEXAM_NASOGASTRODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpcontactaddress = MyBase.Columns("pcontactaddress")
            Me.columnppatientid = MyBase.Columns("ppatientid")
            Me.columnrequest_date = MyBase.Columns("request_date")
            Me.columnDoctor_ID = MyBase.Columns("Doctor_ID")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnconclusion_id = MyBase.Columns("conclusion_id")
            Me.columnconclusion_name = MyBase.Columns("conclusion_name")
            Me.columnmotify = MyBase.Columns("motify")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpcontactaddress = New Global.System.Data.DataColumn("pcontactaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcontactaddress)
            Me.columnppatientid = New Global.System.Data.DataColumn("ppatientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnppatientid)
            Me.columnrequest_date = New Global.System.Data.DataColumn("request_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_date)
            Me.columnDoctor_ID = New Global.System.Data.DataColumn("Doctor_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoctor_ID)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnconclusion_id = New Global.System.Data.DataColumn("conclusion_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconclusion_id)
            Me.columnconclusion_name = New Global.System.Data.DataColumn("conclusion_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconclusion_name)
            Me.columnmotify = New Global.System.Data.DataColumn("motify", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotify)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpcontactaddress.AllowDBNull = false
            Me.columnpcontactaddress.MaxLength = 500
            Me.columnDiagnosis.MaxLength = 150
            Me.columnconclusion_name.MaxLength = 250
            Me.columnmotify.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_PARAEXAM_NASOGASTRORow() As VIEW_PARAEXAM_NASOGASTRORow
            Return CType(Me.NewRow,VIEW_PARAEXAM_NASOGASTRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_PARAEXAM_NASOGASTRORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_PARAEXAM_NASOGASTRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARAEXAM_NASOGASTRORowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_NASOGASTRORowChanged(Me, New VIEW_PARAEXAM_NASOGASTRORowChangeEvent(CType(e.Row,VIEW_PARAEXAM_NASOGASTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARAEXAM_NASOGASTRORowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_NASOGASTRORowChanging(Me, New VIEW_PARAEXAM_NASOGASTRORowChangeEvent(CType(e.Row,VIEW_PARAEXAM_NASOGASTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARAEXAM_NASOGASTRORowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_NASOGASTRORowDeleted(Me, New VIEW_PARAEXAM_NASOGASTRORowChangeEvent(CType(e.Row,VIEW_PARAEXAM_NASOGASTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARAEXAM_NASOGASTRORowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_NASOGASTRORowDeleting(Me, New VIEW_PARAEXAM_NASOGASTRORowChangeEvent(CType(e.Row,VIEW_PARAEXAM_NASOGASTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_PARAEXAM_NASOGASTRORow(ByVal row As VIEW_PARAEXAM_NASOGASTRORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_PARAEXAM_NASOGASTRODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VIEW_PARAEXAM_COLOSCOPYDataTable
        Inherits Global.System.Data.TypedTableBase(Of VIEW_PARAEXAM_COLOSCOPYRow)
        
        Private columnpname As Global.System.Data.DataColumn
        
        Private columnpgender As Global.System.Data.DataColumn
        
        Private columnpAge As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnpcontactaddress As Global.System.Data.DataColumn
        
        Private columnppatientid As Global.System.Data.DataColumn
        
        Private columnrequest_date As Global.System.Data.DataColumn
        
        Private columnDoctor_ID As Global.System.Data.DataColumn
        
        Private columnDiagnosis As Global.System.Data.DataColumn
        
        Private columnrequest_id As Global.System.Data.DataColumn
        
        Private columnConclusion As Global.System.Data.DataColumn
        
        Private columnmotiy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VIEW_PARAEXAM_COLOSCOPY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pgenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpgender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pcontactaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcontactaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ppatientidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnppatientid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doctor_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoctor_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiagnosisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiagnosis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property request_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrequest_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConclusionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConclusion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motiyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotiy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARAEXAM_COLOSCOPYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARAEXAM_COLOSCOPYRow)
            End Get
        End Property
        
        Public Event VIEW_PARAEXAM_COLOSCOPYRowChanging As VIEW_PARAEXAM_COLOSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_COLOSCOPYRowChanged As VIEW_PARAEXAM_COLOSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_COLOSCOPYRowDeleting As VIEW_PARAEXAM_COLOSCOPYRowChangeEventHandler
        
        Public Event VIEW_PARAEXAM_COLOSCOPYRowDeleted As VIEW_PARAEXAM_COLOSCOPYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVIEW_PARAEXAM_COLOSCOPYRow(ByVal row As VIEW_PARAEXAM_COLOSCOPYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVIEW_PARAEXAM_COLOSCOPYRow(ByVal pname As String, ByVal pgender As String, ByVal pAge As Date, ByVal Age As Integer, ByVal pcontactaddress As String, ByVal ppatientid As Long, ByVal request_date As Date, ByVal Doctor_ID As Integer, ByVal Diagnosis As String, ByVal request_id As Long, ByVal Conclusion As String, ByVal motiy As String) As VIEW_PARAEXAM_COLOSCOPYRow
            Dim rowVIEW_PARAEXAM_COLOSCOPYRow As VIEW_PARAEXAM_COLOSCOPYRow = CType(Me.NewRow,VIEW_PARAEXAM_COLOSCOPYRow)
            Dim columnValuesArray() As Object = New Object() {pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, Doctor_ID, Diagnosis, request_id, Conclusion, motiy}
            rowVIEW_PARAEXAM_COLOSCOPYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVIEW_PARAEXAM_COLOSCOPYRow)
            Return rowVIEW_PARAEXAM_COLOSCOPYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VIEW_PARAEXAM_COLOSCOPYDataTable = CType(MyBase.Clone,VIEW_PARAEXAM_COLOSCOPYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VIEW_PARAEXAM_COLOSCOPYDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpname = MyBase.Columns("pname")
            Me.columnpgender = MyBase.Columns("pgender")
            Me.columnpAge = MyBase.Columns("pAge")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnpcontactaddress = MyBase.Columns("pcontactaddress")
            Me.columnppatientid = MyBase.Columns("ppatientid")
            Me.columnrequest_date = MyBase.Columns("request_date")
            Me.columnDoctor_ID = MyBase.Columns("Doctor_ID")
            Me.columnDiagnosis = MyBase.Columns("Diagnosis")
            Me.columnrequest_id = MyBase.Columns("request_id")
            Me.columnConclusion = MyBase.Columns("Conclusion")
            Me.columnmotiy = MyBase.Columns("motiy")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpname = New Global.System.Data.DataColumn("pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpname)
            Me.columnpgender = New Global.System.Data.DataColumn("pgender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpgender)
            Me.columnpAge = New Global.System.Data.DataColumn("pAge", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpAge)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnpcontactaddress = New Global.System.Data.DataColumn("pcontactaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcontactaddress)
            Me.columnppatientid = New Global.System.Data.DataColumn("ppatientid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnppatientid)
            Me.columnrequest_date = New Global.System.Data.DataColumn("request_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_date)
            Me.columnDoctor_ID = New Global.System.Data.DataColumn("Doctor_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoctor_ID)
            Me.columnDiagnosis = New Global.System.Data.DataColumn("Diagnosis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiagnosis)
            Me.columnrequest_id = New Global.System.Data.DataColumn("request_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrequest_id)
            Me.columnConclusion = New Global.System.Data.DataColumn("Conclusion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConclusion)
            Me.columnmotiy = New Global.System.Data.DataColumn("motiy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotiy)
            Me.columnpname.AllowDBNull = false
            Me.columnpname.MaxLength = 200
            Me.columnpgender.AllowDBNull = false
            Me.columnpgender.MaxLength = 10
            Me.columnpAge.AllowDBNull = false
            Me.columnpcontactaddress.AllowDBNull = false
            Me.columnpcontactaddress.MaxLength = 500
            Me.columnDiagnosis.MaxLength = 150
            Me.columnConclusion.MaxLength = 100
            Me.columnmotiy.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVIEW_PARAEXAM_COLOSCOPYRow() As VIEW_PARAEXAM_COLOSCOPYRow
            Return CType(Me.NewRow,VIEW_PARAEXAM_COLOSCOPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VIEW_PARAEXAM_COLOSCOPYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VIEW_PARAEXAM_COLOSCOPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARAEXAM_COLOSCOPYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_COLOSCOPYRowChanged(Me, New VIEW_PARAEXAM_COLOSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_COLOSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARAEXAM_COLOSCOPYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_COLOSCOPYRowChanging(Me, New VIEW_PARAEXAM_COLOSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_COLOSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARAEXAM_COLOSCOPYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_COLOSCOPYRowDeleted(Me, New VIEW_PARAEXAM_COLOSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_COLOSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARAEXAM_COLOSCOPYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARAEXAM_COLOSCOPYRowDeleting(Me, New VIEW_PARAEXAM_COLOSCOPYRowChangeEvent(CType(e.Row,VIEW_PARAEXAM_COLOSCOPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVIEW_PARAEXAM_COLOSCOPYRow(ByVal row As VIEW_PARAEXAM_COLOSCOPYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAnalysis = New DSAnalysis
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VIEW_PARAEXAM_COLOSCOPYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROVINCE_DIAGNOSISRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROVINCE_DIAGNOSIS As PROVINCE_DIAGNOSISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROVINCE_DIAGNOSIS = CType(Me.Table,PROVINCE_DIAGNOSISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ppatientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.ppatientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ppatientid' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.ppatientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.pgenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pgender' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.pAgeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pAge' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pcontactaddress() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.pcontactaddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pcontactaddress' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.pcontactaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prescriptionid() As Long
            Get
                Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.prescriptionidColumn),Long)
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.prescriptionidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diagnosis() As String
            Get
                Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.diagnosisColumn),String)
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.diagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Checkdate() As Date
            Get
                Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.CheckdateColumn),Date)
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.CheckdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVINCE_DIAGNOSIS.pnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pname' in table 'PROVINCE_DIAGNOSIS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVINCE_DIAGNOSIS.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsppatientidNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.ppatientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetppatientidNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.ppatientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspgenderNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.pgenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpgenderNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.pgenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspAgeNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.pAgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpAgeNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.pAgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspcontactaddressNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.pcontactaddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpcontactaddressNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.pcontactaddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspnameNull() As Boolean
            Return Me.IsNull(Me.tablePROVINCE_DIAGNOSIS.pnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpnameNull()
            Me(Me.tablePROVINCE_DIAGNOSIS.pnameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_DIAGNOSI_COMPLAINTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_DIAGNOSI_COMPLAINT As VIEW_DIAGNOSI_COMPLAINTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_DIAGNOSI_COMPLAINT = CType(Me.Table,VIEW_DIAGNOSI_COMPLAINTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property patientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.patientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'patientid' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.patientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property doctorid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.doctoridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'doctorid' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.doctoridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.diagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'diagnosis' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.diagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Checkdate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.CheckdateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Checkdate' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.CheckdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property consulttype() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.consulttypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'consulttype' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.consulttypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property complaint() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.complaintColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'complaint' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.complaintColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pname' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pgenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pgender' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pAgeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pAge' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_DIAGNOSI_COMPLAINT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prescriptionid() As Long
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.prescriptionidColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.prescriptionidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspatientidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.patientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpatientidNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.patientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdoctoridNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.doctoridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdoctoridNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.doctoridColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.diagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiagnosisNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.diagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckdateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.CheckdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckdateNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.CheckdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconsulttypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.consulttypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconsulttypeNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.consulttypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscomplaintNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.complaintColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcomplaintNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.complaintColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.pnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpnameNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspgenderNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.pgenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpgenderNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pgenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.pAgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpAgeNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.pAgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_COMPLAINT.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_DIAGNOSI_COMPLAINT.AgeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_DIAGNOSI_MEDICALHISTORYRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_DIAGNOSI_MEDICALHISTORY As VIEW_DIAGNOSI_MEDICALHISTORYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_DIAGNOSI_MEDICALHISTORY = CType(Me.Table,VIEW_DIAGNOSI_MEDICALHISTORYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_DIAGNOSI_MEDICALHISTORY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property patientid() As Long
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.patientidColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.patientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property doctorid() As Integer
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.doctoridColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.doctoridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diagnosis() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.diagnosisColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.diagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Checkdate() As Date
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.CheckdateColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.CheckdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property consulttype() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.consulttypeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.consulttypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prescriptionid() As Long
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.prescriptionidColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.prescriptionidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property history() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.historyColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.historyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_DIAGNOSI_MEDICALHISTORY.AgeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_DIAGNOSI_PHYSICALCHECKRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_DIAGNOSI_PHYSICALCHECK As VIEW_DIAGNOSI_PHYSICALCHECKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_DIAGNOSI_PHYSICALCHECK = CType(Me.Table,VIEW_DIAGNOSI_PHYSICALCHECKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_DIAGNOSI_PHYSICALCHECK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property patientid() As Long
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.patientidColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.patientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property doctorid() As Integer
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.doctoridColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.doctoridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diagnosis() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.diagnosisColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.diagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Checkdate() As Date
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.CheckdateColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.CheckdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property consulttype() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.consulttypeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.consulttypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prescriptionid() As Long
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.prescriptionidColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.prescriptionidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property physicalcheckid() As Integer
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.physicalcheckidColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.physicalcheckidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property physicalcheck() As String
            Get
                Return CType(Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.physicalcheckColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.physicalcheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_DIAGNOSI_PHYSICALCHECK.AgeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_PARAEXAM_BLOODRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_PARAEXAM_BLOOD As VIEW_PARAEXAM_BLOODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARAEXAM_BLOOD = CType(Me.Table,VIEW_PARAEXAM_BLOODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ppatientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.ppatientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ppatientid' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.ppatientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pcontactaddress() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.pcontactaddressColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.pcontactaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.request_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'request_date' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.request_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doctor_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.Doctor_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doctor_ID' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.Doctor_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property item_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.item_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'item_name' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.item_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property result() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.resultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'result' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.resultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property item_id() As Integer
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.item_idColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.item_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_BLOOD.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'VIEW_PARAEXAM_BLOOD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_BLOOD.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsppatientidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.ppatientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetppatientidNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.ppatientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrequest_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.request_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrequest_dateNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.request_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoctor_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.Doctor_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoctor_IDNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.Doctor_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isitem_nameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.item_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setitem_nameNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.item_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresultNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.resultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresultNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.resultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_BLOOD.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableVIEW_PARAEXAM_BLOOD.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_PARAEXAM_FIBROSCOPYRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_PARAEXAM_FIBROSCOPY As VIEW_PARAEXAM_FIBROSCOPYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARAEXAM_FIBROSCOPY = CType(Me.Table,VIEW_PARAEXAM_FIBROSCOPYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pcontactaddress() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pcontactaddressColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.pcontactaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ppatientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.ppatientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ppatientid' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.ppatientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'request_date' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doctor_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.Doctor_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doctor_ID' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.Doctor_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conclusion_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'conclusion_id' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conclusion_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'conclusion_name' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_id() As Long
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_idColumn),Long)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motify() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.motifyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'motify' in table 'VIEW_PARAEXAM_FIBROSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.motifyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsppatientidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.ppatientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetppatientidNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.ppatientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrequest_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrequest_dateNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.request_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoctor_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.Doctor_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoctor_IDNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.Doctor_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isconclusion_idNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setconclusion_idNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isconclusion_nameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setconclusion_nameNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.conclusion_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotifyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_FIBROSCOPY.motifyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotifyNull()
            Me(Me.tableVIEW_PARAEXAM_FIBROSCOPY.motifyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_PARAEXAM_NASOGASTRORow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_PARAEXAM_NASOGASTRO As VIEW_PARAEXAM_NASOGASTRODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARAEXAM_NASOGASTRO = CType(Me.Table,VIEW_PARAEXAM_NASOGASTRODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pcontactaddress() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pcontactaddressColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.pcontactaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ppatientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.ppatientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ppatientid' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.ppatientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.request_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'request_date' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.request_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doctor_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.Doctor_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doctor_ID' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.Doctor_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conclusion_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'conclusion_id' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conclusion_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'conclusion_name' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motify() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.motifyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'motify' in table 'VIEW_PARAEXAM_NASOGASTRO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.motifyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsppatientidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.ppatientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetppatientidNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.ppatientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrequest_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.request_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrequest_dateNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.request_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoctor_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.Doctor_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoctor_IDNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.Doctor_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isconclusion_idNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setconclusion_idNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isconclusion_nameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setconclusion_nameNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.conclusion_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotifyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_NASOGASTRO.motifyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotifyNull()
            Me(Me.tableVIEW_PARAEXAM_NASOGASTRO.motifyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VIEW_PARAEXAM_COLOSCOPYRow
        Inherits Global.System.Data.DataRow
        
        Private tableVIEW_PARAEXAM_COLOSCOPY As VIEW_PARAEXAM_COLOSCOPYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARAEXAM_COLOSCOPY = CType(Me.Table,VIEW_PARAEXAM_COLOSCOPYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pname() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pnameColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pgender() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pgenderColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pgenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pAge() As Date
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pAgeColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pcontactaddress() As String
            Get
                Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pcontactaddressColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.pcontactaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ppatientid() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ppatientidColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ppatientid' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ppatientidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'request_date' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doctor_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.Doctor_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doctor_ID' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.Doctor_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diagnosis() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.DiagnosisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diagnosis' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.DiagnosisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property request_id() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'request_id' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Conclusion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ConclusionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Conclusion' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ConclusionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motiy() As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.motiyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'motiy' in table 'VIEW_PARAEXAM_COLOSCOPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.motiyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsppatientidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.ppatientidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetppatientidNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ppatientidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrequest_dateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrequest_dateNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoctor_IDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.Doctor_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoctor_IDNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.Doctor_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiagnosisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.DiagnosisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiagnosisNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.DiagnosisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrequest_idNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrequest_idNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.request_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConclusionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.ConclusionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConclusionNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.ConclusionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotiyNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARAEXAM_COLOSCOPY.motiyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotiyNull()
            Me(Me.tableVIEW_PARAEXAM_COLOSCOPY.motiyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROVINCE_DIAGNOSISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROVINCE_DIAGNOSISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROVINCE_DIAGNOSISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROVINCE_DIAGNOSISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_DIAGNOSI_COMPLAINTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_DIAGNOSI_COMPLAINTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_DIAGNOSI_COMPLAINTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_DIAGNOSI_COMPLAINTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_DIAGNOSI_MEDICALHISTORYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_DIAGNOSI_MEDICALHISTORYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_DIAGNOSI_MEDICALHISTORYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_DIAGNOSI_MEDICALHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_DIAGNOSI_PHYSICALCHECKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_DIAGNOSI_PHYSICALCHECKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_DIAGNOSI_PHYSICALCHECKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_DIAGNOSI_PHYSICALCHECKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_PARAEXAM_BLOODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_PARAEXAM_BLOODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_PARAEXAM_BLOODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_PARAEXAM_BLOODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_PARAEXAM_FIBROSCOPYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_PARAEXAM_FIBROSCOPYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_PARAEXAM_FIBROSCOPYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_PARAEXAM_FIBROSCOPYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_PARAEXAM_NASOGASTRORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_PARAEXAM_NASOGASTRORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_PARAEXAM_NASOGASTRORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_PARAEXAM_NASOGASTRORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VIEW_PARAEXAM_COLOSCOPYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VIEW_PARAEXAM_COLOSCOPYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VIEW_PARAEXAM_COLOSCOPYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VIEW_PARAEXAM_COLOSCOPYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSAnalysisTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROVINCE_DIAGNOSISTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROVINCE_DIAGNOSIS"
            tableMapping.ColumnMappings.Add("ppatientid", "ppatientid")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("pcontactaddress", "pcontactaddress")
            tableMapping.ColumnMappings.Add("prescriptionid", "prescriptionid")
            tableMapping.ColumnMappings.Add("diagnosis", "diagnosis")
            tableMapping.ColumnMappings.Add("Checkdate", "Checkdate")
            tableMapping.ColumnMappings.Add("pname", "pname")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ppatientid, pgender, pAge, Age, pcontactaddress, prescriptionid, diagn"& _ 
                "osis, Checkdate, pname"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PROVINCE_DIAGNOSIS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, Checkdate, diagnosis, pAge, pcontactaddress, pgender, pname, ppatient"& _ 
                "id, prescriptionid FROM PROVINCE_DIAGNOSIS WHERE (Checkdate BETWEEN @From AND @T"& _ 
                "o)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ppatientid, pgender, pAge, Age, pcontactaddress, prescriptionid, diagn"& _ 
                "osis, Checkdate, pname"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PROVINCE_DIAGNOSIS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (CheckDate BETWEE"& _ 
                "N @From AND @To) AND pcontactaddress=@Address"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "pcontactaddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ppatientid, pgender, pAge, Age, pcontactaddress, prescriptionid, diagn"& _ 
                "osis, Checkdate, pname"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PROVINCE_DIAGNOSIS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Checkdate BETWEE"& _ 
                "N @From AND @To) AND diagnosis=@diagnosis"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diagnosis", Global.System.Data.SqlDbType.VarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable = New DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable, ByVal From As Date, ByVal _To As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateAllProvince(ByVal From As Date, ByVal _To As Date) As DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            Dim dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable = New DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable, ByVal From As Date, ByVal _To As Date, ByVal Address As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (Address Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Address,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateByProvince(ByVal From As Date, ByVal _To As Date, ByVal Address As String) As DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (Address Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Address,String)
            End If
            Dim dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable = New DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable, ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateByDiagnosis(ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.PROVINCE_DIAGNOSISDataTable = New DSAnalysis.PROVINCE_DIAGNOSISDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_DIAGNOSI_COMPLAINTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_DIAGNOSI_COMPLAINT"
            tableMapping.ColumnMappings.Add("patientid", "patientid")
            tableMapping.ColumnMappings.Add("doctorid", "doctorid")
            tableMapping.ColumnMappings.Add("diagnosis", "diagnosis")
            tableMapping.ColumnMappings.Add("Checkdate", "Checkdate")
            tableMapping.ColumnMappings.Add("consulttype", "consulttype")
            tableMapping.ColumnMappings.Add("complaint", "complaint")
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("prescriptionid", "prescriptionid")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT patientid, doctorid, diagnosis, Checkdate, consulttype, complaint, pname, "& _ 
                "pgender, pAge, Age, prescriptionid FROM dbo.VIEW_DIAGNOSI_COMPLAINT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT patientid, doctorid, diagnosis, Checkdate, consulttype, complaint, pname, "& _ 
                "pgender, pAge, Age, prescriptionid FROM dbo.VIEW_DIAGNOSI_COMPLAINT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Check"& _ 
                "date BETWEEN @From AND @To"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT patientid, doctorid, diagnosis, Checkdate, consulttype, complaint, pname, "& _ 
                "pgender, pAge, Age, prescriptionid FROM dbo.VIEW_DIAGNOSI_COMPLAINT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Che"& _ 
                "ckdate BETWEEN @From AND @To) AND diagnosis=@diagnosis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diagnosis", Global.System.Data.SqlDbType.VarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable = New DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectComplaintDateToDate(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable = New DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectComplaintWithDiagnosis(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal diagnosis As String) As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable = New DSAnalysis.VIEW_DIAGNOSI_COMPLAINTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_DIAGNOSI_MEDICALHISTORYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_DIAGNOSI_MEDICALHISTORY"
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("patientid", "patientid")
            tableMapping.ColumnMappings.Add("doctorid", "doctorid")
            tableMapping.ColumnMappings.Add("diagnosis", "diagnosis")
            tableMapping.ColumnMappings.Add("Checkdate", "Checkdate")
            tableMapping.ColumnMappings.Add("consulttype", "consulttype")
            tableMapping.ColumnMappings.Add("prescriptionid", "prescriptionid")
            tableMapping.ColumnMappings.Add("history", "history")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, history FROM dbo.VIEW_DIAGNOSI_MEDICALHISTORY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, history FROM dbo.VIEW_DIAGNOSI_MEDICALHISTORY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"C"& _ 
                "heckdate BETWEEN @From AND @To"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, history FROM dbo.VIEW_DIAGNOSI_MEDICALHISTORY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "(Checkdate BETWEEN @From and @To) AND (diagnosis=@diagnosis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diagnosis", Global.System.Data.SqlDbType.VarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable = New DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable, ByVal From As Date, ByVal _To As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectMedicalHistoryDateToDate(ByVal From As Date, ByVal _To As Date) As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable = New DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable, ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectMedicalHistoryWithDiagnosis(ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable = New DSAnalysis.VIEW_DIAGNOSI_MEDICALHISTORYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_DIAGNOSI_PHYSICALCHECKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_DIAGNOSI_PHYSICALCHECK"
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("patientid", "patientid")
            tableMapping.ColumnMappings.Add("doctorid", "doctorid")
            tableMapping.ColumnMappings.Add("diagnosis", "diagnosis")
            tableMapping.ColumnMappings.Add("Checkdate", "Checkdate")
            tableMapping.ColumnMappings.Add("consulttype", "consulttype")
            tableMapping.ColumnMappings.Add("prescriptionid", "prescriptionid")
            tableMapping.ColumnMappings.Add("physicalcheckid", "physicalcheckid")
            tableMapping.ColumnMappings.Add("physicalcheck", "physicalcheck")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, physicalcheckid, physicalcheck FROM dbo.VIEW_DIAGNOSI_P"& _ 
                "HYSICALCHECK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, physicalcheckid, physicalcheck FROM dbo.VIEW_DIAGNOSI_P"& _ 
                "HYSICALCHECK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Checkdate BETWEEN @From AND @To"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT pname, pgender, pAge, Age, patientid, doctorid, diagnosis, Checkdate, cons"& _ 
                "ulttype, prescriptionid, physicalcheckid, physicalcheck FROM dbo.VIEW_DIAGNOSI_P"& _ 
                "HYSICALCHECK"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Checkdate BETWEEN @From AND @To) AND diagnosis=@diagnosis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Checkdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@diagnosis", Global.System.Data.SqlDbType.VarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable = New DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable, ByVal From As Date, ByVal _To As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPhysicalDateToDate(ByVal From As Date, ByVal _To As Date) As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable = New DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable, ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPhysicalWithDiagnosis(ByVal From As Date, ByVal _To As Date, ByVal diagnosis As String) As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(From,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To,Date)
            If (diagnosis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("diagnosis")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable = New DSAnalysis.VIEW_DIAGNOSI_PHYSICALCHECKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_PARAEXAM_BLOODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_PARAEXAM_BLOOD"
            tableMapping.ColumnMappings.Add("ppatientid", "ppatientid")
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("pcontactaddress", "pcontactaddress")
            tableMapping.ColumnMappings.Add("request_date", "request_date")
            tableMapping.ColumnMappings.Add("Doctor_ID", "Doctor_ID")
            tableMapping.ColumnMappings.Add("item_name", "item_name")
            tableMapping.ColumnMappings.Add("result", "result")
            tableMapping.ColumnMappings.Add("item_id", "item_id")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ppatientid, pname, pgender, pAge, Age, pcontactaddress, request_date, Doct"& _ 
                "or_ID, item_name, result, item_id, Diagnosis FROM dbo.VIEW_PARAEXAM_BLOOD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ppatientid, pname, pgender, pAge, Age, pcontactaddress, request_date, Doct"& _ 
                "or_ID, item_name, result, item_id, Diagnosis FROM dbo.VIEW_PARAEXAM_BLOOD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "  request_date between @From AND @To"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ppatientid, pname, pgender, pAge, Age, pcontactaddress, request_date, Doct"& _ 
                "or_ID, item_name, result, item_id, Diagnosis FROM dbo.VIEW_PARAEXAM_BLOOD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " (request_date between @from and @to) and Diagnosis=@Diagnosis"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@from", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@to", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable = New DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectParaExamBloodByDateToDate(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable = New DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable, ByVal from As Global.System.Nullable(Of Date), ByVal _to As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (from.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(from.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_to.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_to.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectParaExamBloodByDiagnosis(ByVal from As Global.System.Nullable(Of Date), ByVal _to As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (from.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(from.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_to.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_to.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_BLOODDataTable = New DSAnalysis.VIEW_PARAEXAM_BLOODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_PARAEXAM_FIBROSCOPYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_PARAEXAM_FIBROSCOPY"
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("pcontactaddress", "pcontactaddress")
            tableMapping.ColumnMappings.Add("ppatientid", "ppatientid")
            tableMapping.ColumnMappings.Add("request_date", "request_date")
            tableMapping.ColumnMappings.Add("Doctor_ID", "Doctor_ID")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("conclusion_id", "conclusion_id")
            tableMapping.ColumnMappings.Add("conclusion_name", "conclusion_name")
            tableMapping.ColumnMappings.Add("request_id", "request_id")
            tableMapping.ColumnMappings.Add("motify", "motify")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, conclusion_id, conclusion_name, request_id, motify"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       VIEW_PARAEXAM_FIBROSCOPY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, Diagnosis, Doctor_ID, conclusion_id, conclusion_name, motify, pAge, p"& _ 
                "contactaddress, pgender, pname, ppatientid, request_date, request_id FROM VIEW_P"& _ 
                "ARAEXAM_FIBROSCOPY WHERE (request_date BETWEEN @From AND @To)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Age, Diagnosis, Doctor_ID, conclusion_id, conclusion_name, motify, pAge, p"& _ 
                "contactaddress, pgender, pname, ppatientid, request_date, request_id FROM VIEW_P"& _ 
                "ARAEXAM_FIBROSCOPY WHERE (request_date BETWEEN @From AND @To) AND (Diagnosis = @"& _ 
                "Diagnosis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, conclusion_id, conclusion_name, request_id, motify"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       VIEW_PARAEXAM_FIBROSCOPY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (request_date BETWEEN @From AND @To) and "& _ 
                "(motify=@motify)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@motify", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "motify", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectFibroscopyDateToDate(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectFibroscopyWithDiagnosis(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal motify As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (motify Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(motify,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectFibroScopyWithMotif(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal motify As String) As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (motify Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(motify,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_FIBROSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_PARAEXAM_NASOGASTROTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_PARAEXAM_NASOGASTRO"
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("pcontactaddress", "pcontactaddress")
            tableMapping.ColumnMappings.Add("ppatientid", "ppatientid")
            tableMapping.ColumnMappings.Add("request_date", "request_date")
            tableMapping.ColumnMappings.Add("Doctor_ID", "Doctor_ID")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("conclusion_id", "conclusion_id")
            tableMapping.ColumnMappings.Add("conclusion_name", "conclusion_name")
            tableMapping.ColumnMappings.Add("motify", "motify")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, conclusion_id, conclusion_name, motify"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VIEW_"& _ 
                "PARAEXAM_NASOGASTRO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, Diagnosis, Doctor_ID, conclusion_id, conclusion_name, motify, pAge, p"& _ 
                "contactaddress, pgender, pname, ppatientid, request_date FROM VIEW_PARAEXAM_NASO"& _ 
                "GASTRO WHERE (request_date BETWEEN @From AND @To)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Age, Diagnosis, Doctor_ID, conclusion_id, conclusion_name, motify, pAge, p"& _ 
                "contactaddress, pgender, pname, ppatientid, request_date FROM VIEW_PARAEXAM_NASO"& _ 
                "GASTRO WHERE (request_date BETWEEN @From AND @To) AND (Diagnosis = @Diagnosis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, conclusion_id, conclusion_name, motify"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VIEW_"& _ 
                "PARAEXAM_NASOGASTRO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(request_date BETWEEN @From AND @To) AND (motify = @"& _ 
                "Diagnosis)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "motify", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable = New DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectNasogastroDateToDate(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable = New DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectNasogastroWithDiagnosis(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable = New DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectNasogastroWithMotif(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable = New DSAnalysis.VIEW_PARAEXAM_NASOGASTRODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VIEW_PARAEXAM_COLOSCOPYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VIEW_PARAEXAM_COLOSCOPY"
            tableMapping.ColumnMappings.Add("pname", "pname")
            tableMapping.ColumnMappings.Add("pgender", "pgender")
            tableMapping.ColumnMappings.Add("pAge", "pAge")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("pcontactaddress", "pcontactaddress")
            tableMapping.ColumnMappings.Add("ppatientid", "ppatientid")
            tableMapping.ColumnMappings.Add("request_date", "request_date")
            tableMapping.ColumnMappings.Add("Doctor_ID", "Doctor_ID")
            tableMapping.ColumnMappings.Add("Diagnosis", "Diagnosis")
            tableMapping.ColumnMappings.Add("request_id", "request_id")
            tableMapping.ColumnMappings.Add("Conclusion", "Conclusion")
            tableMapping.ColumnMappings.Add("motiy", "motiy")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Clinic_Management_System.My.MySettings.Default.cms_databaseConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, request_id, Conclusion, motiy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VIEW_PARAEXAM_"& _ 
                "COLOSCOPY"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT Age, Conclusion, Diagnosis, Doctor_ID, motiy, pAge, pcontactaddress, pgend"& _ 
                "er, pname, ppatientid, request_date, request_id FROM VIEW_PARAEXAM_COLOSCOPY WHE"& _ 
                "RE (request_date BETWEEN @From AND @To)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Age, Conclusion, Diagnosis, Doctor_ID, motiy, pAge, pcontactaddress, pgend"& _ 
                "er, pname, ppatientid, request_date, request_id FROM VIEW_PARAEXAM_COLOSCOPY WHE"& _ 
                "RE (request_date BETWEEN @From AND @To) AND (Diagnosis = @Diagnosis)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Diagnosis", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "Diagnosis", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     pname, pgender, pAge, Age, pcontactaddress, ppatientid, request_date, "& _ 
                "Doctor_ID, Diagnosis, request_id, Conclusion, motiy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         VIEW_PARAEXAM_"& _ 
                "COLOSCOPY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (request_date BETWEEN @From AND @To) AND (motiy = @motiy)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "request_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@motiy", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "motiy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelelectColoDateToDate(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectColoscopyWithDiagnosis(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal Diagnosis As String) As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Diagnosis Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Diagnosis,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable, ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal motiy As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (motiy Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(motiy,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectColoscopyWithMotif(ByVal From As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date), ByVal motiy As String) As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (From.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(From.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (motiy Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(motiy,String)
            End If
            Dim dataTable As DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable = New DSAnalysis.VIEW_PARAEXAM_COLOSCOPYDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSAnalysis, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSAnalysis, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSAnalysis, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSAnalysis) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
